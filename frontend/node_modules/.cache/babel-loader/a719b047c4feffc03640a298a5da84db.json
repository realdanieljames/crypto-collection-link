{"ast":null,"code":"var _jsxFileName = \"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CurrencyConverter/CurrencyConverter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport \"./CurrencyConverter.css\";\nimport { connect } from \"react-redux\";\nimport { showCryptoData } from \"../../store/actions/actionCreators\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CurrencyConverter = props => {\n  _s();\n\n  const baseCurrencyRef = useRef();\n  const quoteCurrencyRef = useRef(); //   useEffect(() => {\n  //     // props.showCryptoData(props.selectedCryptoDisplay);\n  //     props.setCryptoData();\n  //   }, []);\n\n  console.log(props);\n  let selectedCryptoData = props.selectedCryptoDisplay.data;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crypto__data__display__currency__converter\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Cryptocurrency Converter Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"base__currency__input\",\n      placeholder: \"1\",\n      ref: baseCurrencyRef,\n      onChange: () => {\n        quoteCurrencyRef.current.value = baseCurrencyRef.current.value;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"base__currency__dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        children: [selectedCryptoData.symbol.toUpperCase(), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), props.cryptoData.map(value => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: value.name,\n          children: [value.name, \" (\", value.symbol.toUpperCase(), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"=\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"quote__currency__input\",\n      type: \"number\",\n      placeholder: selectedCryptoData.market_data.current_price.usd,\n      ref: quoteCurrencyRef,\n      onChange: () => {\n        baseCurrencyRef.current.value = quoteCurrencyRef.current.value;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"quote__currency__dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"USD \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), props.cryptoData.map(value => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: value.name,\n          children: \"USD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 18\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        console.log(parseInt(baseCurrencyRef) * 2);\n      },\n      children: \"Convert\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: selectedCryptoData.market_data.current_price.usd\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CurrencyConverter, \"ep0qAJnYh8y6PMbYtaQ8cjUjdEs=\");\n\n_c = CurrencyConverter;\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay\n  };\n};\n\nexport default connect(mapStateToProps, {\n  showCryptoData\n})(CurrencyConverter);\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyConverter\");","map":{"version":3,"sources":["/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CurrencyConverter/CurrencyConverter.js"],"names":["React","useRef","useEffect","connect","showCryptoData","CurrencyConverter","props","baseCurrencyRef","quoteCurrencyRef","console","log","selectedCryptoData","selectedCryptoDisplay","data","current","value","symbol","toUpperCase","cryptoData","map","name","market_data","current_price","usd","parseInt","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport \"./CurrencyConverter.css\";\nimport { connect } from \"react-redux\";\nimport { showCryptoData } from \"../../store/actions/actionCreators\";\n\nconst CurrencyConverter = (props) => {\n  const baseCurrencyRef = useRef();\n  const quoteCurrencyRef = useRef();\n\n  //   useEffect(() => {\n  //     // props.showCryptoData(props.selectedCryptoDisplay);\n  //     props.setCryptoData();\n  //   }, []);\n\n  console.log(props);\n\n  let selectedCryptoData = props.selectedCryptoDisplay.data;\n  return (\n    <div className=\"crypto__data__display__currency__converter\">\n      <h3>Cryptocurrency Converter Calculator</h3>\n\n      {/* <img src={selectedCryptoData.image.thumb}/>\n        <span>{selectedCryptoData.name}</span>\n        <br/>\n        \n        \n        <img src={selectedCryptoData.image.thumb}/>\n        <span>United states Dollar</span>\n      <input defaultValue={selectedCryptoData.market_data.current_price.usd} placeholder=\"0\" ref={quoteCurrencyRef}/> */}\n\n      <input\n        className=\"base__currency__input\"\n        placeholder=\"1\"\n        ref={baseCurrencyRef}\n        onChange={() => {\n          quoteCurrencyRef.current.value = baseCurrencyRef.current.value;\n        }}\n      />\n      <select className=\"base__currency__dropdown\">\n        <option>{selectedCryptoData.symbol.toUpperCase()} </option>\n\n        {props.cryptoData.map((value) => {\n          return (\n            <option value={value.name}>\n              {value.name} ({value.symbol.toUpperCase()})\n            </option>\n          );\n        })}\n      </select>\n      <div>=</div>\n\n      <input\n        className=\"quote__currency__input\"\n        type=\"number\"\n        placeholder={selectedCryptoData.market_data.current_price.usd}\n        ref={quoteCurrencyRef}\n        onChange={() => {\n          baseCurrencyRef.current.value = quoteCurrencyRef.current.value;\n        }}\n      />\n      <select className=\"quote__currency__dropdown\">\n        <div>USD </div>\n\n        {props.cryptoData.map((value) => {\n          return <option value={value.name}>USD</option>;\n        })}\n      </select>\n\n      <button\n        onClick={() => {\n          console.log(parseInt(baseCurrencyRef) * 2);\n        }}\n      >\n        Convert\n      </button>\n\n      <div>{selectedCryptoData.market_data.current_price.usd}</div>\n      <div>\n        <span>{}</span>\n        {/* {quoteCurrencyRef.current_price.value} */}\n        {/* {baseCurrencyRef.current.value} */}\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay,\n  };\n};\n\nexport default connect(mapStateToProps, { showCryptoData })(CurrencyConverter);\n"]},"metadata":{},"sourceType":"module"}