{"ast":null,"code":"var _jsxFileName = \"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoDataDisplay/CryptoDataDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport \"./CryptoDataDisplay.css\";\nimport { connect } from \"react-redux\";\nimport { setCryptoData // addCryptoData,\n, showCryptoData, getCryptoPriceHistory } from \"../../store/actions/actionCreators\";\nimport CurrencyConverter from \"../CurrencyConverter/CurrencyConverter\";\nimport Chart from \"../CryptoChart/CryptoChart\"; // <script src=\"https://widgets.coingecko.com/coingecko-coin-converter-widget.js\"></script>\n// <coingecko-coin-converter-widget  coin-id=\"bitcoin\" currency=\"usd\" background-color=\"#ffffff\" font-color=\"#4c4c4c\" locale=\"en\"></coingecko-coin-converter-widget>\n//===================================================================================//\n//===================================================================================//\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CryptoDataDisplay = props => {\n  _s();\n\n  useEffect(() => {\n    // props.showCryptoData(props.selectedCryptoDisplay);\n    props.showCryptoData();\n  }, []);\n  console.log(props.selectedCryptoDisplay);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crypto__data__display\",\n    children: props.cryptoData.map(cryptocurrency => {\n      if (cryptocurrency.id === props.selectedCryptoDisplay.id) {\n        console.log(cryptocurrency);\n        console.log(props.selectedCryptoDisplay.id);\n        let selectedCryptoData = props.selectedCryptoDisplay.data;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crypto__data__display__elements\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crypto__data__display__name__logo\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"crypto__data__display__image\" // src={selectedCryptoData.image.large}\n              ,\n              src: cryptocurrency.image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"crypto__data__display__name\",\n              children: cryptocurrency.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"crypto__data__display__symbol\",\n              children: cryptocurrency.symbol.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"crypto__data__display__rank\",\n              children: [\"Rank #\", cryptocurrency.market_cap_rank]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crypto__data__display__numerical__data\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"crypto__data__display__current__price\",\n              children: [\"$\", cryptocurrency.current_price.toLocaleString(), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"crypto__data__display__24h__percentage__change\",\n                style: {\n                  backgroundColor: crypto.price_change_percentage_24h > 0 ? \"green\" : \"red\"\n                },\n                children: [selectedCryptoData.market_data.price_change_percentage_24h, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CurrencyConverter, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Chart, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)]\n        }, selectedCryptoData.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}; //===================================================================================//\n//===================================================================================//\n\n\n_s(CryptoDataDisplay, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = CryptoDataDisplay;\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCryptoData,\n  // addCryptoData,\n  showCryptoData,\n  getCryptoPriceHistory\n})(CryptoDataDisplay);\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoDataDisplay\");","map":{"version":3,"sources":["/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoDataDisplay/CryptoDataDisplay.js"],"names":["React","useEffect","connect","setCryptoData","showCryptoData","getCryptoPriceHistory","CurrencyConverter","Chart","CryptoDataDisplay","props","console","log","selectedCryptoDisplay","cryptoData","map","cryptocurrency","id","selectedCryptoData","data","image","name","symbol","toUpperCase","market_cap_rank","current_price","toLocaleString","backgroundColor","crypto","price_change_percentage_24h","market_data","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./CryptoDataDisplay.css\";\nimport { connect } from \"react-redux\";\n\nimport {\n  setCryptoData,\n  // addCryptoData,\n  showCryptoData,\n  getCryptoPriceHistory\n} from \"../../store/actions/actionCreators\";\nimport CurrencyConverter from \"../CurrencyConverter/CurrencyConverter\";\nimport Chart from \"../CryptoChart/CryptoChart\"\n\n// <script src=\"https://widgets.coingecko.com/coingecko-coin-converter-widget.js\"></script>\n// <coingecko-coin-converter-widget  coin-id=\"bitcoin\" currency=\"usd\" background-color=\"#ffffff\" font-color=\"#4c4c4c\" locale=\"en\"></coingecko-coin-converter-widget>\n\n//===================================================================================//\n//===================================================================================//\n\nconst CryptoDataDisplay = (props) => {\n  useEffect(() => {\n    // props.showCryptoData(props.selectedCryptoDisplay);\n    props.showCryptoData();\n  }, []);\n\n  console.log(props.selectedCryptoDisplay);\n\n  return (\n    <div className=\"crypto__data__display\">\n      {props.cryptoData.map((cryptocurrency) => {\n\n        if (cryptocurrency.id === props.selectedCryptoDisplay.id) {\n          console.log(cryptocurrency)\n          console.log(props.selectedCryptoDisplay.id)\n\n          let selectedCryptoData = props.selectedCryptoDisplay.data;\n\n          return (\n            <div\n              key={selectedCryptoData.id}\n              className=\"crypto__data__display__elements\"\n            >\n              {/*======================================================================================================================== */}\n              <div className=\"crypto__data__display__name__logo\">\n                <img\n                  className=\"crypto__data__display__image\"\n                  // src={selectedCryptoData.image.large}\n                  src={cryptocurrency.image}\n                />\n\n                <h2 className=\"crypto__data__display__name\">\n                  {/* {selectedCryptoData.name} */}\n                  {cryptocurrency.name}\n                </h2>\n                <p className=\"crypto__data__display__symbol\">\n                  {/* {selectedCryptoData.symbol.toUpperCase()} */}\n                  {cryptocurrency.symbol.toUpperCase()}\n                </p>\n\n                <p className=\"crypto__data__display__rank\">\n                  Rank #{cryptocurrency.market_cap_rank}\n                </p>\n\n                {/* <div className=\"crypto__data__display__description\">\n                <h3> What is {selectedCryptoData.name}?</h3>\n                <p >{selectedCryptoData.description.en}</p>\n                </div> */}\n              </div>\n              {/*======================================================================================================================== */}\n              <div className=\"crypto__data__display__numerical__data\">\n                <div className=\"crypto__data__display__current__price\">\n                  $\n                  {/* {selectedCryptoData.market_data.current_price.usd.toLocaleString()} */}\n                  {cryptocurrency.current_price.toLocaleString()}\n                  {/* {selectedCryptoData.market_data.price_change_percentage_24h > 0 ? 'green': 'red'} */}\n                  <span\n                    className=\"crypto__data__display__24h__percentage__change\"\n                    style={{\n                      backgroundColor:\n                        crypto.price_change_percentage_24h > 0\n                          ? \"green\"\n                          : \"red\",\n                    }}\n                  >\n                    {selectedCryptoData.market_data.price_change_percentage_24h}\n                    %\n                  </span>\n                </div>\n                <div>\n                  {/*======================================================================================================================== */}\n                </div>\n              </div>\n              <CurrencyConverter />\n       \n              \n\n\n              <Chart/>\n            </div>\n          );\n        }\n      })}\n    </div>\n  );\n};\n\n//===================================================================================//\n//===================================================================================//\nconst mapStateToProps = (state) => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCryptoData,\n  // addCryptoData,\n  showCryptoData,\n  getCryptoPriceHistory\n})(CryptoDataDisplay);\n"]},"metadata":{},"sourceType":"module"}