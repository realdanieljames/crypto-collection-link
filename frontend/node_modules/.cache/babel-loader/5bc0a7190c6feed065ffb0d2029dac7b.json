{"ast":null,"code":"var _jsxFileName = \"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoChart/CryptoChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport Chart from \"chart.js/auto\";\nimport { connect } from \"react-redux\";\nimport { setCryptoData, addCryptoData, showCryptoData, getCryptoPriceHistory } from \"../../store/actions/actionCreators\"; // var Chartjs = require('chart.js');\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CryptoChart = props => {\n  _s();\n\n  console.log(props);\n\n  const cryptoPricesArray = () => props.selectedCryptoDisplay.priceHistory.map(value => {\n    console.log(value);\n    return value[1];\n  });\n\n  const cryptoDatesArray = () => props.selectedCryptoDisplay.priceHistory.map(value => {\n    console.log(value);\n    return value[0];\n  });\n\n  const chartRef = useRef(); // props.getCryptoPriceHistory(props.selectedCryptoDisplay.name)\n\n  useEffect(() => {\n    props.getCryptoPriceHistory(props.selectedCryptoDisplay.data.id);\n\n    if (chartRef && chartRef.current) {\n      const chartInstance = new Chart(chartRef.current, {\n        type: 'line',\n        data: {\n          labels: cryptoDatesArray(),\n          datasets: [{\n            label: `${props.selectedCryptoDisplay.name} / United States Dollar\n                                        ${props.selectedCryptoDisplay.data.symbol.toUpperCase()} /  USD`,\n            // data: [12, 19, 3, 5, 2, 3],\n            data: cryptoPricesArray(props.selectedCryptoDisplay.data.id),\n            backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n            borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      }); // chartInstance.destroy()\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crypto__data__display__chart\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myChart\",\n      width: \"250\",\n      height: \"100\",\n      ref: chartRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CryptoChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n\n_c = CryptoChart;\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCryptoData,\n  addCryptoData,\n  showCryptoData,\n  getCryptoPriceHistory\n})(CryptoChart);\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoChart\");","map":{"version":3,"sources":["/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoChart/CryptoChart.js"],"names":["React","useRef","useEffect","Chart","connect","setCryptoData","addCryptoData","showCryptoData","getCryptoPriceHistory","CryptoChart","props","console","log","cryptoPricesArray","selectedCryptoDisplay","priceHistory","map","value","cryptoDatesArray","chartRef","data","id","current","chartInstance","type","labels","datasets","label","name","symbol","toUpperCase","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","mapStateToProps","state","cryptoData"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect} from \"react\";\nimport Chart from \"chart.js/auto\";\nimport {connect} from \"react-redux\";\nimport {\n    setCryptoData,\n    addCryptoData,\n    showCryptoData,\n    getCryptoPriceHistory\n    } from \"../../store/actions/actionCreators\";\n// var Chartjs = require('chart.js');\n\nconst CryptoChart = (props) => {\n\n    console.log(props)\n\n    const cryptoPricesArray =()=>  props.selectedCryptoDisplay.priceHistory.map((value)=>{\n        \n        console.log(value)\n        return (value[1])\n    })\n\n    const cryptoDatesArray =()=> props.selectedCryptoDisplay.priceHistory.map((value)=>{\nconsole.log(value)\n      return (value[0])\n    \n    })\n\n    const chartRef = useRef()\n    \n            // props.getCryptoPriceHistory(props.selectedCryptoDisplay.name)\n\n    useEffect(()=>{\n        props.getCryptoPriceHistory(props.selectedCryptoDisplay.data.id);\n        if(chartRef && chartRef.current){\n            const chartInstance = new Chart (chartRef.current, \n                {\n                    type: 'line',\n                    data: {\n                        labels: cryptoDatesArray(),\n                        datasets: [{\n                            label: `${props.selectedCryptoDisplay.name} / United States Dollar\n                                        ${props.selectedCryptoDisplay.data.symbol.toUpperCase()} /  USD`, \n                            // data: [12, 19, 3, 5, 2, 3],\n                            data: cryptoPricesArray(props.selectedCryptoDisplay.data.id),\n                            backgroundColor: [\n                                'rgba(255, 99, 132, 0.2)',\n                                'rgba(54, 162, 235, 0.2)',\n                                'rgba(255, 206, 86, 0.2)',\n                                'rgba(75, 192, 192, 0.2)',\n                                'rgba(153, 102, 255, 0.2)',\n                                'rgba(255, 159, 64, 0.2)'\n                            ],\n                            borderColor: [\n                                'rgba(255, 99, 132, 1)',\n                                'rgba(54, 162, 235, 1)',\n                                'rgba(255, 206, 86, 1)',\n                                'rgba(75, 192, 192, 1)',\n                                'rgba(153, 102, 255, 1)',\n                                'rgba(255, 159, 64, 1)'\n                            ],\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n                        scales: {\n                            y: {\n                                beginAtZero: true\n                            }\n                        }\n                    }\n                }\n                )\n                // chartInstance.destroy()\n\n            }\n    },[])\n  return (\n    <div className=\"crypto__data__display__chart\">\n      <canvas id=\"myChart\" width='250' height=\"100\" ref={chartRef}></canvas>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state)=> {\n    return {\n        cryptoData: state.cryptoData,\n        selectedCryptoDisplay:state.selectedCryptoDisplay\n    }\n}\n\nexport default connect(mapStateToProps, {setCryptoData, addCryptoData, showCryptoData, getCryptoPriceHistory})(CryptoChart);\n"]},"metadata":{},"sourceType":"module"}