{"ast":null,"code":"var _jsxFileName = \"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Chart/CryptoChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport { Chartjs } from \"chart.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Chart = () => {\n  _s();\n\n  const chartRef = useRef();\n  useEffect(() => {\n    if (chartRef && chartRef.current) {\n      const chartInstance = new Chartjs(chartRef.current, {\n        type: 'line',\n        data: {\n          labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n          datasets: [{\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2, 3],\n            backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n            borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myChart\",\n      width: 250,\n      height: 250,\n      ref: chartRef,\n      children: \" \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 14\n  }, this);\n};\n\n_s(Chart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n\n_c = Chart;\nexport default Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Chart/CryptoChart.js"],"names":["React","useRef","useEffect","Chartjs","Chart","chartRef","current","chartInstance","type","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,SAASC,OAAT,QAAwB,UAAxB;;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAGhB,QAAMC,QAAQ,GAAGJ,MAAM,EAAvB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIG,QAAQ,IAAIA,QAAQ,CAACC,OAAzB,EAAkC;AAC9B,YAAMC,aAAa,GAAG,IAAIJ,OAAJ,CAAYE,QAAQ,CAACC,OAArB,EAA8B;AAChDE,QAAAA,IAAI,EAAE,MAD0C;AAEhDC,QAAAA,IAAI,EAAE;AACFC,UAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,MAAR,EAAgB,QAAhB,EAA0B,OAA1B,EAAmC,QAAnC,EAA6C,QAA7C,CADN;AAEFC,UAAAA,QAAQ,EAAE,CAAC;AACPC,YAAAA,KAAK,EAAE,YADA;AAEPH,YAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,EAAkB,CAAlB,CAFC;AAGPI,YAAAA,eAAe,EAAE,CACb,yBADa,EAEb,yBAFa,EAGb,yBAHa,EAIb,yBAJa,EAKb,0BALa,EAMb,yBANa,CAHV;AAWPC,YAAAA,WAAW,EAAE,CACT,uBADS,EAET,uBAFS,EAGT,uBAHS,EAIT,uBAJS,EAKT,wBALS,EAMT,uBANS,CAXN;AAmBPC,YAAAA,WAAW,EAAE;AAnBN,WAAD;AAFR,SAF0C;AA0BhDC,QAAAA,OAAO,EAAE;AACLC,UAAAA,MAAM,EAAE;AACJC,YAAAA,CAAC,EAAE;AACCC,cAAAA,WAAW,EAAE;AADd;AADC;AADH;AA1BuC,OAA9B,CAAtB;AAkCH;AACJ,GArCQ,CAAT;AAsCA,sBAAS;AAAA,4BAEL;AACO,MAAA,EAAE,EAAG,SADZ;AAEA,MAAA,KAAK,EAAK,GAFV;AAGA,MAAA,MAAM,EAAK,GAHX;AAIA,MAAA,GAAG,EAAKd,QAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFK;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AASH,CApDD;;GAAMD,K;;KAAAA,K;AAsDN,eAAeA,KAAf","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport { Chartjs } from \"chart.js\"\n\nconst Chart = () => {\n\n\n    const chartRef = useRef()\n\n    useEffect(() => {\n        if (chartRef && chartRef.current) {\n            const chartInstance = new Chartjs(chartRef.current, {\n                type: 'line',\n                data: {\n                    labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n                    datasets: [{\n                        label: '# of Votes',\n                        data: [12, 19, 3, 5, 2, 3],\n                        backgroundColor: [\n                            'rgba(255, 99, 132, 0.2)',\n                            'rgba(54, 162, 235, 0.2)',\n                            'rgba(255, 206, 86, 0.2)',\n                            'rgba(75, 192, 192, 0.2)',\n                            'rgba(153, 102, 255, 0.2)',\n                            'rgba(255, 159, 64, 0.2)'\n                        ],\n                        borderColor: [\n                            'rgba(255, 99, 132, 1)',\n                            'rgba(54, 162, 235, 1)',\n                            'rgba(255, 206, 86, 1)',\n                            'rgba(75, 192, 192, 1)',\n                            'rgba(153, 102, 255, 1)',\n                            'rgba(255, 159, 64, 1)'\n                        ],\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    }\n                }\n            })\n        }\n    })\n    return ( <\n        div >\n        <\n        canvas id = \"myChart\"\n        width = { 250 }\n        height = { 250 }\n        ref = { chartRef } > < /canvas> <\n        /div>\n    );\n};\n\nexport default Chart;"]},"metadata":{},"sourceType":"module"}