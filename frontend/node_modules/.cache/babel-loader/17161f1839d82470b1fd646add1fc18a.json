{"ast":null,"code":"var _jsxFileName = \"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CurrencyConverter/CurrencyConverter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport \"./CurrencyConverter.css\";\nimport { connect } from \"react-redux\";\nimport { showCryptoData } from \"../../store/actions/actionCreators\"; //===================================================================================//\n//===================================================================================//\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CurrencyConverter = props => {\n  _s();\n\n  const baseCurrencyRef = useRef();\n  const quoteCurrencyRef = useRef();\n  const baseCurrencyDropdownRef = useRef(); //===================================================================================//\n  //===================================================================================//\n  //   useEffect(() => {\n  //     // props.showCryptoData(props.selectedCryptoDisplay);\n  //     props.setCryptoData();\n  //   }, []);\n\n  console.log(props);\n  let selectedCryptoData = props.selectedCryptoDisplay.data; //===================================================================================//\n  //===================================================================================//\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crypto__data__display__currency__converter\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Cryptocurrency Converter Calculator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"base__currency__input\",\n      placeholder: \"1\",\n      ref: baseCurrencyRef,\n      onChange: () => {\n        quoteCurrencyRef.current.value = baseCurrencyRef.current.value;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"base__currency__dropdown\",\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        children: [selectedCryptoData.symbol.toUpperCase(), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), props.cryptoData.map(value => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: value.id,\n          children: [value.name, \" (\", value.symbol.toUpperCase(), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"=\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"quote__currency__input\",\n      type: \"number\",\n      placeholder: selectedCryptoData.market_data.current_price.usd,\n      ref: quoteCurrencyRef,\n      onChange: () => {\n        baseCurrencyRef.current.value = quoteCurrencyRef.current.value * selectedCryptoData.market_data.current_price.usd;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      className: \"quote__currency__dropdown\",\n      onChange: () => {\n        console.log(selecteddCryptoData.i);\n      },\n      ref: baseCurrencyDropdownRef,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        children: \"USD \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), props.cryptoData.map(value => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: value.id,\n          children: value.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 16\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}; //===================================================================================//\n//===================================================================================//\n\n\n_s(CurrencyConverter, \"kqbo3VcWy41nHbWcS00dWvmyIg0=\");\n\n_c = CurrencyConverter;\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay\n  };\n}; //===================================================================================//\n//===================================================================================//\n\n\nexport default connect(mapStateToProps, {\n  showCryptoData\n})(CurrencyConverter);\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyConverter\");","map":{"version":3,"sources":["/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CurrencyConverter/CurrencyConverter.js"],"names":["React","useRef","useEffect","connect","showCryptoData","CurrencyConverter","props","baseCurrencyRef","quoteCurrencyRef","baseCurrencyDropdownRef","console","log","selectedCryptoData","selectedCryptoDisplay","data","current","value","symbol","toUpperCase","cryptoData","map","id","name","market_data","current_price","usd","selecteddCryptoData","i","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport \"./CurrencyConverter.css\";\nimport { connect } from \"react-redux\";\nimport { showCryptoData } from \"../../store/actions/actionCreators\";\n\n\n//===================================================================================//\n//===================================================================================//\nconst CurrencyConverter = (props) => {\nconst baseCurrencyRef = useRef();\nconst quoteCurrencyRef = useRef();\n\nconst baseCurrencyDropdownRef = useRef()\n//===================================================================================//\n//===================================================================================//\n//   useEffect(() => {\n//     // props.showCryptoData(props.selectedCryptoDisplay);\n//     props.setCryptoData();\n//   }, []);\n\nconsole.log(props);\n\nlet selectedCryptoData = props.selectedCryptoDisplay.data;\n\n\n//===================================================================================//\n//===================================================================================//\nreturn (\n    <div className=\"crypto__data__display__currency__converter\">\n    <h3>Cryptocurrency Converter Calculator</h3>\n\n    {/* <img src={selectedCryptoData.image.thumb}/>\n        <span>{selectedCryptoData.name}</span>\n        <br/>\n        \n        \n        <img src={selectedCryptoData.image.thumb}/>\n        <span>United states Dollar</span>\n    <input defaultValue={selectedCryptoData.market_data.current_price.usd} placeholder=\"0\" ref={quoteCurrencyRef}/> */}\n\n    <input\n        className=\"base__currency__input\"\n        placeholder=\"1\"\n        ref={baseCurrencyRef}\n        onChange={() => {\n        quoteCurrencyRef.current.value = baseCurrencyRef.current.value  ;\n        }}\n    />\n    \n    <select className=\"base__currency__dropdown\">\n        <option>{selectedCryptoData.symbol.toUpperCase()} </option>\n\n        {props.cryptoData.map((value) => {\n        return (\n            <option value={value.id}>\n            {value.name} ({value.symbol.toUpperCase()})\n            </option>\n        );\n        })}\n    </select>\n\n\n    <div>=</div>\n\n    <input\n        className=\"quote__currency__input\"\n        type=\"number\"\n        placeholder={selectedCryptoData.market_data.current_price.usd}\n        ref={quoteCurrencyRef}\n        onChange={() => {\n        baseCurrencyRef.current.value = quoteCurrencyRef.current.value * selectedCryptoData.market_data.current_price.usd ;\n        \n        }}\n       \n    />\n    <select className=\"quote__currency__dropdown\" onChange={()=>{console.log(selecteddCryptoData.i)}}  ref={baseCurrencyDropdownRef}>\n        <option>USD </option>\n\n        {props.cryptoData.map((value) => {\n        return <option  value={value.id}>{value.name}</option>;\n        })}\n    </select>\n\n\n   \n    </div>\n);\n};\n//===================================================================================//\n//===================================================================================//\nconst mapStateToProps = (state) => {\nreturn {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay,\n};\n};\n//===================================================================================//\n//===================================================================================//\nexport default connect(mapStateToProps, { showCryptoData })(CurrencyConverter);\n"]},"metadata":{},"sourceType":"module"}