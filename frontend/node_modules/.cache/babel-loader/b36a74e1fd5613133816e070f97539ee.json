{"ast":null,"code":"var _jsxFileName = \"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoDataDisplay/CryptoDataDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from \"react\";\nimport \"./CryptoDataDisplay.css\";\nimport { connect } from \"react-redux\";\nimport { setCryptoData, addCryptoData, showCryptoData } from \"../../store/actions/actionCreators\"; // <script src=\"https://widgets.coingecko.com/coingecko-coin-converter-widget.js\"></script>\n// <coingecko-coin-converter-widget  coin-id=\"bitcoin\" currency=\"usd\" background-color=\"#ffffff\" font-color=\"#4c4c4c\" locale=\"en\"></coingecko-coin-converter-widget>\n//===================================================================================//\n//===================================================================================//\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CryptoDataDisplay = props => {\n  _s();\n\n  const baseCurrencyRef = useRef();\n  const quoteCurrencyRef = useRef();\n  useEffect(() => {\n    // props.showCryptoData(props.selectedCryptoDisplay);\n    props.showCryptoData();\n  }, []);\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crypto__data__display\",\n    children: props.cryptoData.map((cryptocurrency, cryptocurrencyIndex, cryptoCurrencyArray) => {\n      let allCryptoNames = cryptocurrency.name;\n      console.log(allCryptoNames);\n\n      if (cryptocurrency.id === props.selectedCryptoDisplay.name) {\n        let selectedCryptoData = props.selectedCryptoDisplay.data;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crypto__data__display__elements\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crypto__data__display__name__logo\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"crypto__data__display__image\",\n              src: selectedCryptoData.image.large\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"crypto__data__display__name\",\n              children: selectedCryptoData.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"crypto__data__display__symbol\",\n              children: selectedCryptoData.symbol.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"crypto__data__display__rank\",\n              children: [\"Rank #\", cryptocurrency.market_cap_rank]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crypto__data__display__numerical__data\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"crypto__data__display__current__price\",\n              children: [\"$\", selectedCryptoData.market_data.current_price.usd.toLocaleString(), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"crypto__data__display__24h__percentage__change\",\n                style: {\n                  backgroundColor: selectedCryptoData.market_data.price_change_percentage_24h > 0 ? \"green\" : \"red\"\n                },\n                children: [selectedCryptoData.market_data.price_change_percentage_24h, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 72,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crypto__data__display__currency__converter\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              defaultValue: parseInt(1),\n              placeholder: \"0\",\n              ref: baseCurrencyRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: selectedCryptoData.image.thumb\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: [selectedCryptoData.symbol.toUpperCase(), \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                placeholder: \"search\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 19\n              }, this), props.cryptoData.map(value => {\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: value.name,\n                  children: [value.name, \" (\", value.symbol.toUpperCase(), \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 23\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"=\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => {\n                console.log(parseInt(baseCurrencyRef) * 2);\n              },\n              children: \"Convert\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crypto__data__display__chart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this)]\n        }, selectedCryptoData.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}; //===================================================================================//\n//===================================================================================//\n\n\n_s(CryptoDataDisplay, \"QBU828ooRT1JPA2xX3pbsneQZp8=\");\n\n_c = CryptoDataDisplay;\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCryptoData,\n  addCryptoData,\n  showCryptoData\n})(CryptoDataDisplay); // export default CryptoDataDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoDataDisplay\");","map":{"version":3,"sources":["/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoDataDisplay/CryptoDataDisplay.js"],"names":["React","useEffect","useRef","connect","setCryptoData","addCryptoData","showCryptoData","CryptoDataDisplay","props","baseCurrencyRef","quoteCurrencyRef","console","log","cryptoData","map","cryptocurrency","cryptocurrencyIndex","cryptoCurrencyArray","allCryptoNames","name","id","selectedCryptoDisplay","selectedCryptoData","data","image","large","symbol","toUpperCase","market_cap_rank","market_data","current_price","usd","toLocaleString","backgroundColor","price_change_percentage_24h","parseInt","thumb","value","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport \"./CryptoDataDisplay.css\";\nimport { connect } from \"react-redux\";\n\nimport {\n  setCryptoData,\n  addCryptoData,\n  showCryptoData,\n} from \"../../store/actions/actionCreators\";\n\n\n\n// <script src=\"https://widgets.coingecko.com/coingecko-coin-converter-widget.js\"></script>\n// <coingecko-coin-converter-widget  coin-id=\"bitcoin\" currency=\"usd\" background-color=\"#ffffff\" font-color=\"#4c4c4c\" locale=\"en\"></coingecko-coin-converter-widget>\n\n//===================================================================================//\n//===================================================================================//\n\nconst CryptoDataDisplay = (props) => {\n\n\n\n  const baseCurrencyRef = useRef()\n  const quoteCurrencyRef = useRef()\n  useEffect(() => {\n    // props.showCryptoData(props.selectedCryptoDisplay);\n    props.showCryptoData();\n  }, []);\n\n  console.log(props);\n\n  return (\n    <div className=\"crypto__data__display\">\n      {props.cryptoData.map((cryptocurrency, cryptocurrencyIndex, cryptoCurrencyArray) => {\n        let allCryptoNames = cryptocurrency.name\n        console.log(allCryptoNames)\n        if (cryptocurrency.id === props.selectedCryptoDisplay.name) {\n          let selectedCryptoData = props.selectedCryptoDisplay.data;\n\n\n          return (\n            <div key={selectedCryptoData.id} className=\"crypto__data__display__elements\">\n              {/*======================================================================================================================== */}\n              <div className=\"crypto__data__display__name__logo\">\n                <img\n                  className=\"crypto__data__display__image\"\n                  src={selectedCryptoData.image.large}\n                />\n\n                <h2 className=\"crypto__data__display__name\">\n                  {selectedCryptoData.name}\n                </h2>\n                <p className=\"crypto__data__display__symbol\">\n                  {selectedCryptoData.symbol.toUpperCase()}\n                </p>\n\n                <p className=\"crypto__data__display__rank\">\n                  Rank #{cryptocurrency.market_cap_rank}\n                </p>\n\n                {/* <div className=\"crypto__data__display__description\">\n                <h3> What is {selectedCryptoData.name}?</h3>\n                <p >{selectedCryptoData.description.en}</p>\n                </div> */}\n              </div>\n              {/*======================================================================================================================== */}\n              <div className=\"crypto__data__display__numerical__data\">\n                <div className=\"crypto__data__display__current__price\">\n                  $\n                  {selectedCryptoData.market_data.current_price.usd.toLocaleString()}\n                  {/* {selectedCryptoData.market_data.price_change_percentage_24h > 0 ? 'green': 'red'} */}\n                  <span\n                    className=\"crypto__data__display__24h__percentage__change\"\n                    style={{\n                      backgroundColor:\n                        selectedCryptoData.market_data\n                          .price_change_percentage_24h > 0\n                          ? \"green\"\n                          : \"red\",\n                    }}\n                  >\n                    {selectedCryptoData.market_data.price_change_percentage_24h}\n                    %\n                  </span>\n                </div>\n                <div>\n                  {/*======================================================================================================================== */}\n                </div>\n              </div>\n              <div className=\"crypto__data__display__currency__converter\" >\n                {/* <img src={selectedCryptoData.image.thumb}/>\n                <span>{selectedCryptoData.name}</span>\n                <br/>\n                \n                \n                <img src={selectedCryptoData.image.thumb}/>\n                <span>United states Dollar</span>\n              <input defaultValue={selectedCryptoData.market_data.current_price.usd} placeholder=\"0\" ref={quoteCurrencyRef}/> */}\n\n              <input defaultValue={parseInt(1)} placeholder=\"0\" ref={baseCurrencyRef}/>\n              <select>\n              <img src={selectedCryptoData.image.thumb}></img>\n                  <option>{selectedCryptoData.symbol.toUpperCase()} </option>\n                  <input placeholder=\"search\"/>\n                  {props.cryptoData.map((value)=>{\n                    return (\n                      <option value={value.name}>{value.name } ({value.symbol.toUpperCase()})</option>\n                    )\n                  })}\n                  \n              </select>\n              <div>=</div>\n            \n\n            <button onClick={()=>{\n              console.log(parseInt(baseCurrencyRef) * 2)\n            }}>Convert</button>\n\n            <div>\n\n              <span>{}</span>\n              {/* {quoteCurrencyRef.current_price.value} */}\n              {/* {baseCurrencyRef.current.value} */}\n            </div>\n              </div>  \n\n              <div className=\"crypto__data__display__chart\" >\n\n\n              \n              \n\n              \n              </div>\n\n                    {/* {parseInt(quoteCurrencyRef.current.value) + parseInt(baseCurrencyRef.current.value)}\n                    {console.log(quoteCurrencyRef.current.value)} */}\n              </div>\n          );\n        }\n      })}\n    </div>\n  );\n};\n\n//===================================================================================//\n//===================================================================================//\nconst mapStateToProps = (state) => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCryptoData,\n  addCryptoData,\n  showCryptoData,\n})(CryptoDataDisplay);\n// export default CryptoDataDisplay;\n"]},"metadata":{},"sourceType":"module"}