{"ast":null,"code":"import * as actionTypes from \"../actions/actionTypes\"; //===================================================================================//\n//===================================================================================//\n\nconst initialState = {\n  cryptoData: [],\n  selectedCryptoDisplay: {\n    name: '',\n    data: {}\n  }\n}; //===================================================================================//\n//===================================================================================//\n\nconst cryptoDataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_CRYPTO_DATA:\n      return {\n        cryptoData: [...state.cryptoData, action.newCryptoData]\n      };\n\n    case actionTypes.SET_CRYPTO_DATA:\n      console.log(action);\n      return {\n        cryptoData: action.newCryptoDataArr,\n        selectedCryptoDisplay: {\n          name: 'bitcoin',\n          data: action.newSelectedCryptoDisplay.data\n        }\n      };\n\n    case actionTypes.SHOW_CRYPTO_DATA_DISPLAY:\n      // state.cryptoData.map((value) => console.log(value))\n      return {\n        // cryptoData: [...state.cryptoData],\n        // cryptoData: [...state.cryptoData],\n        selectedCryptoDisplay: {\n          name: action.newSelectedCryptoDisplay.name,\n          data: action.newSelectedCryptoDisplay.data\n        }\n      };\n\n    default:\n      return state;\n  }\n}; //===================================================================================//\n//===================================================================================//\n\n\nexport default cryptoDataReducer;","map":{"version":3,"sources":["/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/reducers/cryptoDataReducer.js"],"names":["actionTypes","initialState","cryptoData","selectedCryptoDisplay","name","data","cryptoDataReducer","state","action","type","ADD_CRYPTO_DATA","newCryptoData","SET_CRYPTO_DATA","console","log","newCryptoDataArr","newSelectedCryptoDisplay","SHOW_CRYPTO_DATA_DISPLAY"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B,C,CAEA;AACA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,UAAU,EAAE,EADK;AAEjBC,EAAAA,qBAAqB,EAAE;AAAEC,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,IAAI,EAAE;AAAlB;AAFN,CAArB,C,CAQA;AACA;;AACA,MAAMC,iBAAiB,GAAG,CAACC,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAExD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,WAAW,CAACU,eAAjB;AACI,aAAO;AACHR,QAAAA,UAAU,EAAE,CAAC,GAAGK,KAAK,CAACL,UAAV,EAAsBM,MAAM,CAACG,aAA7B;AADT,OAAP;;AAIJ,SAAKX,WAAW,CAACY,eAAjB;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACA,aAAO;AACHN,QAAAA,UAAU,EAAEM,MAAM,CAACO,gBADhB;AAEHZ,QAAAA,qBAAqB,EAAE;AACnBC,UAAAA,IAAI,EAAE,SADa;AAEnBC,UAAAA,IAAI,EAAEG,MAAM,CAACQ,wBAAP,CAAgCX;AAFnB;AAFpB,OAAP;;AAOJ,SAAKL,WAAW,CAACiB,wBAAjB;AACI;AAGA,aAAO;AACH;AACA;AACAd,QAAAA,qBAAqB,EAAE;AACnBC,UAAAA,IAAI,EAAEI,MAAM,CAACQ,wBAAP,CAAgCZ,IADnB;AAEnBC,UAAAA,IAAI,EAAEG,MAAM,CAACQ,wBAAP,CAAgCX;AAFnB;AAHpB,OAAP;;AAUJ;AACI,aAAOE,KAAP;AA9BR;AAgCH,CAlCD,C,CAqCA;AACA;;;AACA,eAAeD,iBAAf","sourcesContent":["import * as actionTypes from \"../actions/actionTypes\";\n\n//===================================================================================//\n//===================================================================================//\nconst initialState = {\n    cryptoData: [],\n    selectedCryptoDisplay: { name: '', data: {} }\n\n}\n\n\n\n//===================================================================================//\n//===================================================================================//\nconst cryptoDataReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case actionTypes.ADD_CRYPTO_DATA:\n            return {\n                cryptoData: [...state.cryptoData, action.newCryptoData]\n            }\n\n        case actionTypes.SET_CRYPTO_DATA:\n            console.log(action)\n            return {\n                cryptoData: action.newCryptoDataArr,\n                selectedCryptoDisplay: {\n                    name: 'bitcoin',\n                    data: action.newSelectedCryptoDisplay.data\n                }\n            }\n        case actionTypes.SHOW_CRYPTO_DATA_DISPLAY:\n            // state.cryptoData.map((value) => console.log(value))\n\n\n            return {\n                // cryptoData: [...state.cryptoData],\n                // cryptoData: [...state.cryptoData],\n                selectedCryptoDisplay: {\n                    name: action.newSelectedCryptoDisplay.name,\n                    data: action.newSelectedCryptoDisplay.data\n                }\n\n\n            }\n        default:\n            return state;\n    }\n}\n\n\n//===================================================================================//\n//===================================================================================//\nexport default cryptoDataReducer;"]},"metadata":{},"sourceType":"module"}