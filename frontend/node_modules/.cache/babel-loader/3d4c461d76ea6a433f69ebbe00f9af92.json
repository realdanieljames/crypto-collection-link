{"ast":null,"code":"var _jsxFileName = \"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/src/components/CryptoDataDisplay/CryptoDataDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport \"./CryptoDataDisplay.css\";\nimport { connect } from \"react-redux\";\nimport { setCryptoData, addCryptoData, showCryptoData } from \"../../store/actions/actionCreators\"; //===================================================================================//\n//===================================================================================//\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CryptoDataDisplay = props => {\n  _s();\n\n  useEffect(() => {\n    props.showCryptoData(props.selectedCryptoDisplay);\n  }, []);\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crypto__data__display\",\n    children: props.cryptoData.map(cryptocurrency => {\n      if (cryptocurrency.id === props.selectedCryptoDisplay.name) {\n        let selectedCryptoData = props.selectedCryptoDisplay.data;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crypto__data__display__elements\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crypto__data__display__name__logo\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"crypto__data__display__image\",\n              src: selectedCryptoData.image.large\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"crypto__data__display__name\",\n              children: selectedCryptoData.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: selectedCryptoData.symbol.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crypto__data__display__numerical__data\",\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"$\", selectedCryptoData.market_data.current_price.usd.toLocaleString(\"en-US\")]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}; //===================================================================================//\n//===================================================================================//\n\n\n_s(CryptoDataDisplay, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = CryptoDataDisplay;\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCryptoData,\n  addCryptoData,\n  showCryptoData\n})(CryptoDataDisplay); // export default CryptoDataDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoDataDisplay\");","map":{"version":3,"sources":["/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/src/components/CryptoDataDisplay/CryptoDataDisplay.js"],"names":["React","useEffect","connect","setCryptoData","addCryptoData","showCryptoData","CryptoDataDisplay","props","selectedCryptoDisplay","console","log","cryptoData","map","cryptocurrency","id","name","selectedCryptoData","data","image","large","symbol","toUpperCase","market_data","current_price","usd","toLocaleString","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,yBAAP;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SACEC,aADF,EAEEC,aAFF,EAGEC,cAHF,QAIO,oCAJP,C,CAKA;AACA;;;;AAEA,MAAMC,iBAAiB,GAAIC,KAAD,IAAW;AAAA;;AAEnCN,EAAAA,SAAS,CAAC,MAAI;AACZM,IAAAA,KAAK,CAACF,cAAN,CAAqBE,KAAK,CAACC,qBAA3B;AACD,GAFQ,EAEP,EAFO,CAAT;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA,cAGGA,KAAK,CAACI,UAAN,CAAiBC,GAAjB,CAAsBC,cAAD,IAAoB;AAExC,UAAIA,cAAc,CAACC,EAAf,KAAsBP,KAAK,CAACC,qBAAN,CAA4BO,IAAtD,EAA4D;AAC1D,YAAIC,kBAAkB,GAAET,KAAK,CAACC,qBAAN,CAA4BS,IAApD;AAEA,4BACE;AAAK,UAAA,SAAS,EAAC,iCAAf;AAAA,kCACE;AAAK,YAAA,SAAS,EAAC,mCAAf;AAAA,oCACE;AACE,cAAA,SAAS,EAAC,8BADZ;AAEE,cAAA,GAAG,EAAED,kBAAkB,CAACE,KAAnB,CAAyBC;AAFhC;AAAA;AAAA;AAAA;AAAA,oBADF,eAME;AAAI,cAAA,SAAS,EAAC,6BAAd;AAAA,wBACGH,kBAAkB,CAACD;AADtB;AAAA;AAAA;AAAA;AAAA,oBANF,eASI;AAAA,wBAECC,kBAAkB,CAACI,MAAnB,CAA0BC,WAA1B;AAFD;AAAA;AAAA;AAAA;AAAA,oBATJ,eAeE;AAAA;AAAA;AAAA;AAAA,oBAfF,eAmBE;AAAA;AAAA;AAAA;AAAA,oBAnBF;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAkCE;AAAK,YAAA,SAAS,EAAC,wCAAf;AAAA,mCACE;AAAA,8BACIL,kBAAkB,CAACM,WAAnB,CAA+BC,aAA/B,CAA6CC,GAA7C,CAAiDC,cAAjD,CAAgE,OAAhE,CADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBAlCF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF;AA0CD;AACF,KAhDA;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAuDD,CAjED,C,CAmEA;AACA;;;GApEMnB,iB;;KAAAA,iB;;AAqEN,MAAMoB,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLhB,IAAAA,UAAU,EAAEgB,KAAK,CAAChB,UADb;AAELH,IAAAA,qBAAqB,EAAEmB,KAAK,CAACnB;AAFxB,GAAP;AAID,CALD;;AAOA,eAAeN,OAAO,CAACwB,eAAD,EAAkB;AAAEvB,EAAAA,aAAF;AAAiBC,EAAAA,aAAjB;AAA+BC,EAAAA;AAA/B,CAAlB,CAAP,CACbC,iBADa,CAAf,C,CAGA","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./CryptoDataDisplay.css\";\nimport { connect } from \"react-redux\";\n\nimport {\n  setCryptoData,\n  addCryptoData,\n  showCryptoData,\n} from \"../../store/actions/actionCreators\";\n//===================================================================================//\n//===================================================================================//\n\nconst CryptoDataDisplay = (props) => {\n  \n  useEffect(()=>{\n    props.showCryptoData(props.selectedCryptoDisplay)\n  },[])\n  \n  console.log(props)\n\n\n\n  return (\n    <div className=\"crypto__data__display\">\n\n\n      {props.cryptoData.map((cryptocurrency) => {\n\n        if (cryptocurrency.id === props.selectedCryptoDisplay.name) {\n          let selectedCryptoData =props.selectedCryptoDisplay.data\n\n          return (\n            <div className=\"crypto__data__display__elements\">\n              <div className=\"crypto__data__display__name__logo\">\n                <img\n                  className=\"crypto__data__display__image\"\n                  src={selectedCryptoData.image.large}\n                />\n                \n                <h2 className=\"crypto__data__display__name\">\n                  {selectedCryptoData.name}\n                </h2>\n                  <span>\n\n                  {selectedCryptoData.symbol.toUpperCase()}\n                  </span>\n\n\n                <br/>\n\n                {/* <p>Rank #{cryptocurrency.market_cap_rank}</p> */}\n              \n                <br/>\n\n                {/* <div className=\"crypto__data__display__description\">\n                <h3> What is {selectedCryptoData.name}?</h3>\n                <p >{selectedCryptoData.description.en}</p>\n                </div> */}\n\n            \n\n\n\n\n              </div>\n\n              <div className=\"crypto__data__display__numerical__data\">\n                <h3>\n                  ${selectedCryptoData.market_data.current_price.usd.toLocaleString(\"en-US\")}\n                </h3>\n              </div>\n            </div>\n          );\n        }\n      })}\n    </div>\n  );\n};\n\n//===================================================================================//\n//===================================================================================//\nconst mapStateToProps = (state) => {\n  return { \n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay\n  };\n};\n\nexport default connect(mapStateToProps, { setCryptoData, addCryptoData,showCryptoData })(\n  CryptoDataDisplay\n);\n// export default CryptoDataDisplay;\n"]},"metadata":{},"sourceType":"module"}