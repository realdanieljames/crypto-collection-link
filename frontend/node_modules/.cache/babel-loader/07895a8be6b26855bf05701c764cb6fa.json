{"ast":null,"code":"var _jsxFileName = \"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/src/components/CryptoDataDisplay/CryptoDataDisplay.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport \"./CryptoDataDisplay.css\";\nimport { connect } from \"react-redux\";\nimport { setCryptoData, addCryptoData, showCryptoData } from \"../../store/actions/actionCreators\"; //===================================================================================//\n//===================================================================================//\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CryptoDataDisplay = props => {\n  _s();\n\n  useEffect(() => {\n    props.showCryptoData(props.selectedCryptoDisplay);\n  }, []);\n  console.log(props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"crypto__data__display\",\n    children: props.cryptoData.map(cryptocurrency => {\n      if (cryptocurrency.id === props.selectedCryptoDisplay.name) {\n        let selectedCryptoData = props.selectedCryptoDisplay.data;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"crypto__data__display__elements\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crypto__data__display__name__logo\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              className: \"crypto__data__display__image\",\n              src: selectedCryptoData.image.large\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"crypto__data__display__name\",\n              children: selectedCryptoData.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"crypto__data__display__symbol\",\n              children: selectedCryptoData.symbol.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"crypto__data__display__rank\",\n              children: [\"Rank #\", cryptocurrency.market_cap_rank]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crypto__data__display__numerical__data\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"crypto__data__display__current__price\",\n              children: [\"$\", selectedCryptoData.market_data.current_price.usd.toLocaleString(), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"crypto__data__display__24h__percentage__change\",\n                style: {\n                  backgroundColor: selectedCryptoData.market_data.price_change_percentage_24h > 0 ? \"green\" : \"red\"\n                },\n                children: [selectedCryptoData.market_data.price_change_percentage_24h, \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"crypto__data__display__currency__converter\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: \" 1 USD is equivalent to\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"1.85 EUR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"as of 2019/1/2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this);\n      }\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}; //===================================================================================//\n//===================================================================================//\n\n\n_s(CryptoDataDisplay, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = CryptoDataDisplay;\n\nconst mapStateToProps = state => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCryptoData,\n  addCryptoData,\n  showCryptoData\n})(CryptoDataDisplay); // export default CryptoDataDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"CryptoDataDisplay\");","map":{"version":3,"sources":["/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/src/components/CryptoDataDisplay/CryptoDataDisplay.js"],"names":["React","useEffect","connect","setCryptoData","addCryptoData","showCryptoData","CryptoDataDisplay","props","selectedCryptoDisplay","console","log","cryptoData","map","cryptocurrency","id","name","selectedCryptoData","data","image","large","symbol","toUpperCase","market_cap_rank","market_data","current_price","usd","toLocaleString","backgroundColor","price_change_percentage_24h","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./CryptoDataDisplay.css\";\nimport { connect } from \"react-redux\";\n\nimport {\n  setCryptoData,\n  addCryptoData,\n  showCryptoData,\n} from \"../../store/actions/actionCreators\";\n//===================================================================================//\n//===================================================================================//\n\nconst CryptoDataDisplay = (props) => {\n  useEffect(() => {\n    props.showCryptoData(props.selectedCryptoDisplay);\n  }, []);\n\n  console.log(props);\n\n  return (\n    <div className=\"crypto__data__display\">\n      {props.cryptoData.map((cryptocurrency) => {\n        if (cryptocurrency.id === props.selectedCryptoDisplay.name) {\n          let selectedCryptoData = props.selectedCryptoDisplay.data;\n\n          return (\n            <div className=\"crypto__data__display__elements\">\n              {/*======================================================================================================================== */}\n              <div className=\"crypto__data__display__name__logo\">\n                <img\n                  className=\"crypto__data__display__image\"\n                  src={selectedCryptoData.image.large}\n                />\n\n                <h2 className=\"crypto__data__display__name\">\n                  {selectedCryptoData.name}\n                </h2>\n                <p className=\"crypto__data__display__symbol\">\n                  {selectedCryptoData.symbol.toUpperCase()}\n                </p>\n\n                <p className=\"crypto__data__display__rank\">\n                  Rank #{cryptocurrency.market_cap_rank}\n                </p>\n\n                {/* <div className=\"crypto__data__display__description\">\n                <h3> What is {selectedCryptoData.name}?</h3>\n                <p >{selectedCryptoData.description.en}</p>\n                </div> */}\n              </div>\n              {/*======================================================================================================================== */}\n              <div className=\"crypto__data__display__numerical__data\">\n                <div className=\"crypto__data__display__current__price\">\n                  $\n                  {selectedCryptoData.market_data.current_price.usd.toLocaleString()}\n                  {/* {selectedCryptoData.market_data.price_change_percentage_24h > 0 ? 'green': 'red'} */}\n                  <span\n                    className=\"crypto__data__display__24h__percentage__change\"\n                    style={{\n                      backgroundColor:\n                        selectedCryptoData.market_data\n                          .price_change_percentage_24h > 0\n                          ? \"green\"\n                          : \"red\",\n                    }}\n                  >\n                    {selectedCryptoData.market_data.price_change_percentage_24h}\n                    %\n                  </span>\n                </div>\n                <div>\n                  {/*======================================================================================================================== */}\n                </div>\n              </div>\n              <div className=\"crypto__data__display__currency__converter\">\n                <h5> 1 USD is equivalent to</h5>\n                <h2>1.85 EUR</h2>\n                <p>as of 2019/1/2</p>\n                \n              </div>\n            </div>\n          );\n        }\n      })}\n    </div>\n  );\n};\n\n//===================================================================================//\n//===================================================================================//\nconst mapStateToProps = (state) => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCryptoData,\n  addCryptoData,\n  showCryptoData,\n})(CryptoDataDisplay);\n// export default CryptoDataDisplay;\n"]},"metadata":{},"sourceType":"module"}