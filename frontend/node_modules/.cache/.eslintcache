[{"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/index.js":"1","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/App.js":"2","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/reportWebVitals.js":"3","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/reducers/cryptoDataReducer.js":"4","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Navbar/Navbar.js":"5","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoRankingPage/CryptoRankingPage.js":"6","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/actions/actionTypes.js":"7","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/actions/actionCreators.js":"8","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoDataDisplay/CryptoDataDisplay.js":"9","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Login/Login.js":"10","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CreateNewAccount/CreateNewAccount.js":"11","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CurrencyConverter/CurrencyConverter.js":"12","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoChart/CryptoChart.js":"13","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/UserProfile/UserProfile.js":"14"},{"size":915,"mtime":1617987621700,"results":"15","hashOfConfig":"16"},{"size":1010,"mtime":1618947950699,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1617909909456,"results":"18","hashOfConfig":"16"},{"size":3108,"mtime":1618866994375,"results":"19","hashOfConfig":"16"},{"size":1671,"mtime":1618947981979,"results":"20","hashOfConfig":"16"},{"size":3741,"mtime":1618860397705,"results":"21","hashOfConfig":"16"},{"size":233,"mtime":1618545889140,"results":"22","hashOfConfig":"16"},{"size":3540,"mtime":1618950588690,"results":"23","hashOfConfig":"16"},{"size":4541,"mtime":1618865572584,"results":"24","hashOfConfig":"16"},{"size":5362,"mtime":1618954698658,"results":"25","hashOfConfig":"16"},{"size":5273,"mtime":1618954527491,"results":"26","hashOfConfig":"16"},{"size":3540,"mtime":1618850144901,"results":"27","hashOfConfig":"16"},{"size":3343,"mtime":1618935474569,"results":"28","hashOfConfig":"16"},{"size":836,"mtime":1618948582551,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1hi5gwe",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"32"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/index.js",[],["63","64"],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/App.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/reportWebVitals.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/reducers/cryptoDataReducer.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Navbar/Navbar.js",["65"],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoRankingPage/CryptoRankingPage.js",["66","67","68"],"import React, { useEffect, useRef } from \"react\";\nimport \"./CryptoRankingPage.css\";\nimport { connect } from \"react-redux\";\nimport {\nsetCryptoData,\n// addCryptoData,\nshowCryptoData,\ngetCryptoPriceHistory\n} from \"../../store/actions/actionCreators\";\nimport CryptoDataDisplay from \"../CryptoDataDisplay/CryptoDataDisplay\";\nimport cryptoDataReducer from \"../../store/reducers/cryptoDataReducer\";\n\n//===================================================================================//\n//===================================================================================//\n\nconst CryptoRankingPage = (props) => {\nuseEffect(() => {\n    \n    \n    props.setCryptoData();\n},[]);\n\nconsole.log(props)\n//===================================================================================//\n//===================================================================================//\nreturn (\n    <div className=\"crypto__ranking__container\">\n    <div className=\"coin__info\">\n        {/* <div className=\"search__length\"> showing Top {coinsPerPage} of Page {pageNumber} </div>  */}\n        {props.cryptoData.map((cryptocurrency) => (\n\n\n        <div key={cryptocurrency.id} className=\"coin__card\" onClick={()=> {\n            \n            props.showCryptoData(cryptocurrency.id)\n            props.getCryptoPriceHistory(cryptocurrency.id)\n            }} >\n            {/* <div className=\"favorite__icon\"> {<StarOutlineOutlinedIcon/>}</div> */}\n            {/* {<FavoriteBorderIcon/>} */}\n            <div className=\"card__rank\">\n            {\" \"}\n            Rank: {cryptocurrency.market_cap_rank} {<br />}{\" \"}\n            <strong> ( {cryptocurrency.symbol.toUpperCase()} )</strong>{\" \"}\n            </div>\n            {/* <div className=\"card__marketcap\"> MCap: {cryptocurrency.market_data.market_cap.usd.toLocaleString(\"en-US\",currencyObj)}</div> */}\n            {/* <div className=\"card__circulating__supply\">Circulating Supply:{<br/>} {Number(cryptocurrency.market_data.circulating_supply).toLocaleString(\"en-US\")} <strong> {cryptocurrency.symbol.toUpperCase()}</strong></div> */}\n\n            {/* <div className=\"card__marketcap\">MCap: {cryptocurrency.market_data.market_cap.usd.toLocaleString(\"en-US\",currencyObj)}</div> */}\n            <img\n            className=\"card__image\"\n            src={cryptocurrency.image}\n            alt={cryptocurrency.name}\n            />\n            <div className=\"card__name\">{cryptocurrency.name}</div>\n            {/* <div className=\"current__price\">  Price</div> */}\n            <div className=\"card__price\">\n            {\" \"}\n            USD: {\"  \"}\n            {cryptocurrency.current_price}\n            {/* <div className=\"card__price\"> USD:  {\"  \"}{cryptocurrency.market_data.current_price.usd.toLocaleString(\"en-US\",currencyObj)}  */}\n            <hr />\n            {/* BTC: â‚¿{cryptocurrency.market_data.current_price.btc} */}\n            {/* <hr/>  */}\n            {/* ETH: {cryptocurrency.market_data.current_price.eth} */}\n            {/* <hr/>     */}\n            </div>\n        </div>\n        ))}\n    </div>\n        <CryptoDataDisplay />\n    </div>\n);\n};\n\n//===================================================================================//\n//===================================================================================//\nconst mapStateToProps = (state) => {\nreturn {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay\n};\n};\n\n//===================================================================================//\n//===================================================================================//\n\nexport default connect(mapStateToProps, { setCryptoData, showCryptoData,getCryptoPriceHistory })(\nCryptoRankingPage\n);\n// export default CryptoRankingPage;\n","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/actions/actionTypes.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/actions/actionCreators.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoDataDisplay/CryptoDataDisplay.js",["69","70","71","72"],"import React, { useEffect } from \"react\";\nimport \"./CryptoDataDisplay.css\";\nimport { connect } from \"react-redux\";\n\nimport {\n  setCryptoData,\n  // addCryptoData,\n  showCryptoData,\n  getCryptoPriceHistory\n} from \"../../store/actions/actionCreators\";\nimport CurrencyConverter from \"../CurrencyConverter/CurrencyConverter\";\nimport Chart from \"../CryptoChart/CryptoChart\"\n\n// <script src=\"https://widgets.coingecko.com/coingecko-coin-converter-widget.js\"></script>\n// <coingecko-coin-converter-widget  coin-id=\"bitcoin\" currency=\"usd\" background-color=\"#ffffff\" font-color=\"#4c4c4c\" locale=\"en\"></coingecko-coin-converter-widget>\n\n//===================================================================================//\n//===================================================================================//\n\nconst CryptoDataDisplay = (props) => {\n  useEffect(() => {\n    // props.showCryptoData(props.selectedCryptoDisplay);\n    props.showCryptoData();\n  }, []);\n\n  console.log(props);\n\n  return (\n    <div className=\"crypto__data__display\">\n      {props.cryptoData.map((cryptocurrency) => {\n\n        if (cryptocurrency.id === props.selectedCryptoDisplay.id) {\n          console.log(cryptocurrency)\n          console.log(props.selectedCryptoDisplay.id)\n\n          let selectedCryptoData = props.selectedCryptoDisplay.data;\n\n          return (\n            <div\n              key={cryptocurrency.id}\n              className=\"crypto__data__display__elements\"\n            >\n              {/*======================================================================================================================== */}\n              <div className=\"crypto__data__display__name__logo\">\n                <img\n                  className=\"crypto__data__display__image\"\n                  // src={selectedCryptoData.image.large}\n                  src={cryptocurrency.image}\n                />\n\n                <h2 className=\"crypto__data__display__name\">\n                  {/* {selectedCryptoData.name} */}\n                  {cryptocurrency.name}\n                </h2>\n                <p className=\"crypto__data__display__symbol\">\n                  {/* {selectedCryptoData.symbol.toUpperCase()} */}\n                  {cryptocurrency.symbol.toUpperCase()}\n                </p>\n\n                <p className=\"crypto__data__display__rank\">\n                  Rank #{cryptocurrency.market_cap_rank}\n                </p>\n\n                {/* <div className=\"crypto__data__display__description\">\n                <h3> What is {selectedCryptoData.name}?</h3>\n                <p >{selectedCryptoData.description.en}</p>\n                </div> */}\n              </div>\n              {/*======================================================================================================================== */}\n              <div className=\"crypto__data__display__numerical__data\">\n                <div className=\"crypto__data__display__current__price\">\n                  $\n                  {/* {selectedCryptoData.market_data.current_price.usd.toLocaleString()} */}\n                  {cryptocurrency.current_price.toLocaleString()}\n                  {/* {selectedCryptoData.market_data.price_change_percentage_24h > 0 ? 'green': 'red'} */}\n                  <span\n                    className=\"crypto__data__display__24h__percentage__change\"\n                    style={{\n                      backgroundColor:\n                        cryptocurrency.price_change_percentage_24h > 0\n                          ? \"green\"\n                          : \"red\",\n                    }}\n                  >\n                    {cryptocurrency.price_change_percentage_24h}\n                    %\n                  </span>\n                </div>\n                <div>\n                  {/*======================================================================================================================== */}\n                </div>\n              </div>\n              <CurrencyConverter />\n       \n              \n\n\n              <Chart/>\n            </div>\n          );\n        }\n      })}\n    </div>\n  );\n};\n\n//===================================================================================//\n//===================================================================================//\nconst mapStateToProps = (state) => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCryptoData,\n  // addCryptoData,\n  showCryptoData,\n  getCryptoPriceHistory\n})(CryptoDataDisplay);\n","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Login/Login.js",["73","74","75","76","77"],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CreateNewAccount/CreateNewAccount.js",["78","79","80","81","82"],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CurrencyConverter/CurrencyConverter.js",["83"],"import React, { useRef, useEffect } from \"react\";\nimport \"./CurrencyConverter.css\";\nimport { connect } from \"react-redux\";\nimport { showCryptoData } from \"../../store/actions/actionCreators\";\n\n\n//===================================================================================//\n//===================================================================================//\nconst CurrencyConverter = (props) => {\nconst baseCurrencyRef = useRef();\nconst quoteCurrencyRef = useRef();\n\nconst baseCurrencyDropdownRef = useRef()\n//===================================================================================//\n//===================================================================================//\n//   useEffect(() => {\n//     // props.showCryptoData(props.selectedCryptoDisplay);\n//     props.setCryptoData();\n//   }, []);\n\nconsole.log(props);\n\nlet selectedCryptoData = props.selectedCryptoDisplay.data;\n\n\n//===================================================================================//\n//===================================================================================//\nreturn (\n    <div className=\"crypto__data__display__currency__converter\">\n    <h3>Cryptocurrency Converter Calculator</h3>\n    {/* ========================================================================================================== */}\n\n\n    <input\n        className=\"base__currency__input\"\n        placeholder=\"1\"\n        ref={baseCurrencyRef}\n        onChange={() => {\n        quoteCurrencyRef.current.value = baseCurrencyRef.current.value * selectedCryptoData.market_data.current_price.usd  ;\n        }}\n    />\n    \n    <select className=\"base__currency__dropdown\" onChange={()=>{\n        console.log(props)\n        // if(props.)\n            }}\n        >\n        <option>{selectedCryptoData.symbol.toUpperCase()} </option>\n\n        {props.cryptoData.map((value) => {\n        return (\n            <option value={value.id}>\n            {value.name} ({value.symbol.toUpperCase()})\n            </option>\n        );\n        })}\n    </select>\n\n\n    <div>=</div>\n\n    <input\n        className=\"quote__currency__input\"\n        type=\"number\"\n        placeholder={selectedCryptoData.market_data.current_price.usd}\n        ref={quoteCurrencyRef}\n        onChange={() => {\n        baseCurrencyRef.current.value = quoteCurrencyRef.current.value / selectedCryptoData.market_data.current_price.usd ;\n        \n        }}\n       \n    />\n    <select className=\"quote__currency__dropdown\" onChange={()=>{console.log(baseCurrencyDropdownRef.current.value) \n        props.showCryptoData(baseCurrencyDropdownRef.current.value)}}  ref={baseCurrencyDropdownRef}>\n        <option>USD </option>\n\n        {props.cryptoData.map((value) => {\n        return <option  key={value.id} value={value.id}>{value.symbol.toUpperCase()}</option>;\n        })}\n    </select>\n    {/* ========================================================================================================== */}\n\n   \n    </div>\n);\n};\n//===================================================================================//\n//===================================================================================//\nconst mapStateToProps = (state) => {\nreturn {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay,\n};\n};\n//===================================================================================//\n//===================================================================================//\nexport default connect(mapStateToProps, { showCryptoData })(CurrencyConverter);\n","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoChart/CryptoChart.js",["84","85"],"import React, {useRef, useEffect} from \"react\";\nimport Chart from \"chart.js/auto\";\nimport {connect} from \"react-redux\";\nimport {\n    setCryptoData,\n    // addCryptoData,\n    showCryptoData,\n    getCryptoPriceHistory\n    } from \"../../store/actions/actionCreators\";\n\n\nconst CryptoChart = (props) => {\n\n    \n    const prices =()=> props.selectedCryptoDisplay.priceHistory.map((price)=>{\n        console.log(price[1])\n        return price[1]\n    })\n    const dates =()=> props.selectedCryptoDisplay.priceHistory.map((date)=>{\n        \n        return date[0]\n    })\n    \n    console.log(props)\n    const chartRef = useRef()\n    \n            // props.getCryptoPriceHistory(props.selectedCryptoDisplay.name)\n\n    useEffect(()=>{\n        props.getCryptoPriceHistory(props.selectedCryptoDisplay.data.id);\n\n\n// const prices = props.selectedCryptoDisplay.priceHistory.map((price)=>{\n//     return price[1]\n// })\n// const dates = props.selectedCryptoDisplay.priceHistory.map((date)=>{\n//     return date[0]\n// })\n\nconsole.log(prices)\n\n\n        if(chartRef && chartRef.current){\n            const chartInstance = new Chart (chartRef.current, \n                {\n                    type: 'line',\n                    data: {\n                        // labels: cryptoDatesArray(),\n                        labels: dates(),\n                        datasets: [{\n                            label: `${props.selectedCryptoDisplay.name} / United States Dollar\n                                        ${props.selectedCryptoDisplay.data.symbol.toUpperCase()} /  USD`, \n                            // data: [12, 19, 3, 5, 2, 3],\n                            data: prices(),\n                            backgroundColor: [\n                                'rgba(255, 99, 132, 0.2)',\n                                'rgba(54, 162, 235, 0.2)',\n                                'rgba(255, 206, 86, 0.2)',\n                                'rgba(75, 192, 192, 0.2)',\n                                'rgba(153, 102, 255, 0.2)',\n                                'rgba(255, 159, 64, 0.2)'\n                            ],\n                            borderColor: [\n                                'rgba(255, 99, 132, 1)',\n                                'rgba(54, 162, 235, 1)',\n                                'rgba(255, 206, 86, 1)',\n                                'rgba(75, 192, 192, 1)',\n                                'rgba(153, 102, 255, 1)',\n                                'rgba(255, 159, 64, 1)'\n                            ],\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n                        scales: {\n                            y: {\n                                beginAtZero: true\n                            }\n                        }\n                    }\n                }\n                )\n                // chartInstance.destroy()\n\n            }\n    },[])\n  return (\n    <div className=\"crypto__data__display__chart\">\n      <canvas id=\"myChart\" width='250' height=\"100\" ref={chartRef}></canvas>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state)=> {\n    return {\n        cryptoData: state.cryptoData,\n        selectedCryptoDisplay:state.selectedCryptoDisplay\n    }\n}\n\nexport default connect(mapStateToProps, {setCryptoData, showCryptoData, getCryptoPriceHistory})(CryptoChart);\n","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/UserProfile/UserProfile.js",["86"],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":7,"column":8,"nodeType":"93","messageId":"94","endLine":7,"endColumn":19},{"ruleId":"91","severity":1,"message":"95","line":1,"column":28,"nodeType":"93","messageId":"94","endLine":1,"endColumn":34},{"ruleId":"91","severity":1,"message":"96","line":11,"column":8,"nodeType":"93","messageId":"94","endLine":11,"endColumn":25},{"ruleId":"97","severity":1,"message":"98","line":21,"column":3,"nodeType":"99","endLine":21,"endColumn":5,"suggestions":"100"},{"ruleId":"97","severity":1,"message":"98","line":24,"column":6,"nodeType":"99","endLine":24,"endColumn":8,"suggestions":"101"},{"ruleId":"102","severity":1,"message":"103","line":30,"column":46,"nodeType":"104","messageId":"105","endLine":30,"endColumn":48},{"ruleId":"91","severity":1,"message":"106","line":36,"column":15,"nodeType":"93","messageId":"94","endLine":36,"endColumn":33},{"ruleId":"107","severity":1,"message":"108","line":45,"column":17,"nodeType":"109","endLine":49,"endColumn":19},{"ruleId":"91","severity":1,"message":"110","line":2,"column":8,"nodeType":"93","messageId":"94","endLine":2,"endColumn":17},{"ruleId":"91","severity":1,"message":"111","line":4,"column":8,"nodeType":"93","messageId":"94","endLine":4,"endColumn":14},{"ruleId":"91","severity":1,"message":"112","line":44,"column":10,"nodeType":"93","messageId":"94","endLine":44,"endColumn":18},{"ruleId":"91","severity":1,"message":"113","line":45,"column":17,"nodeType":"93","messageId":"94","endLine":45,"endColumn":25},{"ruleId":"114","severity":1,"message":"115","line":154,"column":43,"nodeType":"109","endLine":154,"endColumn":54},{"ruleId":"91","severity":1,"message":"111","line":3,"column":8,"nodeType":"93","messageId":"94","endLine":3,"endColumn":14},{"ruleId":"91","severity":1,"message":"116","line":10,"column":8,"nodeType":"93","messageId":"94","endLine":10,"endColumn":17},{"ruleId":"91","severity":1,"message":"117","line":20,"column":10,"nodeType":"93","messageId":"94","endLine":20,"endColumn":20},{"ruleId":"91","severity":1,"message":"118","line":20,"column":22,"nodeType":"93","messageId":"94","endLine":20,"endColumn":35},{"ruleId":"114","severity":1,"message":"115","line":143,"column":38,"nodeType":"109","endLine":143,"endColumn":49},{"ruleId":"91","severity":1,"message":"119","line":1,"column":25,"nodeType":"93","messageId":"94","endLine":1,"endColumn":34},{"ruleId":"91","severity":1,"message":"120","line":44,"column":19,"nodeType":"93","messageId":"94","endLine":44,"endColumn":32},{"ruleId":"97","severity":1,"message":"121","line":86,"column":7,"nodeType":"99","endLine":86,"endColumn":9,"suggestions":"122"},{"ruleId":"107","severity":1,"message":"108","line":13,"column":13,"nodeType":"109","endLine":13,"endColumn":19},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'UserProfile' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'cryptoDataReducer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["125"],["126"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'selectedCryptoData' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'PropTypes' is defined but never used.","'Button' is defined but never used.","'username' is assigned a value but never used.","'setEmail' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'validator' is defined but never used.","'emailError' is assigned a value but never used.","'setEmailError' is assigned a value but never used.","'useEffect' is defined but never used.","'chartInstance' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dates', 'prices', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["127"],"no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},{"desc":"128","fix":"130"},{"desc":"131","fix":"132"},"Update the dependencies array to be: [props]",{"range":"133","text":"134"},{"range":"135","text":"134"},"Update the dependencies array to be: [dates, prices, props]",{"range":"136","text":"137"},[666,668],"[props]",[954,956],[2916,2918],"[dates, prices, props]"]