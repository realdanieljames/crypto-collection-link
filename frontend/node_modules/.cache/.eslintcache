[{"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/index.js":"1","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/App.js":"2","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/reportWebVitals.js":"3","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/reducers/cryptoDataReducer.js":"4","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Navbar/Navbar.js":"5","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoRankingPage/CryptoRankingPage.js":"6","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/actions/actionTypes.js":"7","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/actions/actionCreators.js":"8","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoDataDisplay/CryptoDataDisplay.js":"9","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Login/Login.js":"10","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CreateNewAccount/CreateNewAccount.js":"11","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CurrencyConverter/CurrencyConverter.js":"12","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoChart/CryptoChart.js":"13","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/UserProfile/UserProfile.js":"14","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Search/Search.js":"15"},{"size":915,"mtime":1617987621700,"results":"16","hashOfConfig":"17"},{"size":1010,"mtime":1618947950699,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1617909909456,"results":"19","hashOfConfig":"17"},{"size":3108,"mtime":1618866994375,"results":"20","hashOfConfig":"17"},{"size":1724,"mtime":1619018756886,"results":"21","hashOfConfig":"17"},{"size":3741,"mtime":1618860397705,"results":"22","hashOfConfig":"17"},{"size":233,"mtime":1618545889140,"results":"23","hashOfConfig":"17"},{"size":3540,"mtime":1618950588690,"results":"24","hashOfConfig":"17"},{"size":4541,"mtime":1618865572584,"results":"25","hashOfConfig":"17"},{"size":5361,"mtime":1619016661282,"results":"26","hashOfConfig":"17"},{"size":5289,"mtime":1618958090586,"results":"27","hashOfConfig":"17"},{"size":3540,"mtime":1618850144901,"results":"28","hashOfConfig":"17"},{"size":3343,"mtime":1618935474569,"results":"29","hashOfConfig":"17"},{"size":836,"mtime":1618948582551,"results":"30","hashOfConfig":"17"},{"size":692,"mtime":1619019128814,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1hi5gwe",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/index.js",[],["69","70"],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/App.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/reportWebVitals.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/reducers/cryptoDataReducer.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Navbar/Navbar.js",["71"],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoRankingPage/CryptoRankingPage.js",["72","73","74"],"import React, { useEffect, useRef } from \"react\";\nimport \"./CryptoRankingPage.css\";\nimport { connect } from \"react-redux\";\nimport {\nsetCryptoData,\n// addCryptoData,\nshowCryptoData,\ngetCryptoPriceHistory\n} from \"../../store/actions/actionCreators\";\nimport CryptoDataDisplay from \"../CryptoDataDisplay/CryptoDataDisplay\";\nimport cryptoDataReducer from \"../../store/reducers/cryptoDataReducer\";\n\n//===================================================================================//\n//===================================================================================//\n\nconst CryptoRankingPage = (props) => {\nuseEffect(() => {\n    \n    \n    props.setCryptoData();\n},[]);\n\nconsole.log(props)\n//===================================================================================//\n//===================================================================================//\nreturn (\n    <div className=\"crypto__ranking__container\">\n    <div className=\"coin__info\">\n        {/* <div className=\"search__length\"> showing Top {coinsPerPage} of Page {pageNumber} </div>  */}\n        {props.cryptoData.map((cryptocurrency) => (\n\n\n        <div key={cryptocurrency.id} className=\"coin__card\" onClick={()=> {\n            \n            props.showCryptoData(cryptocurrency.id)\n            props.getCryptoPriceHistory(cryptocurrency.id)\n            }} >\n            {/* <div className=\"favorite__icon\"> {<StarOutlineOutlinedIcon/>}</div> */}\n            {/* {<FavoriteBorderIcon/>} */}\n            <div className=\"card__rank\">\n            {\" \"}\n            Rank: {cryptocurrency.market_cap_rank} {<br />}{\" \"}\n            <strong> ( {cryptocurrency.symbol.toUpperCase()} )</strong>{\" \"}\n            </div>\n            {/* <div className=\"card__marketcap\"> MCap: {cryptocurrency.market_data.market_cap.usd.toLocaleString(\"en-US\",currencyObj)}</div> */}\n            {/* <div className=\"card__circulating__supply\">Circulating Supply:{<br/>} {Number(cryptocurrency.market_data.circulating_supply).toLocaleString(\"en-US\")} <strong> {cryptocurrency.symbol.toUpperCase()}</strong></div> */}\n\n            {/* <div className=\"card__marketcap\">MCap: {cryptocurrency.market_data.market_cap.usd.toLocaleString(\"en-US\",currencyObj)}</div> */}\n            <img\n            className=\"card__image\"\n            src={cryptocurrency.image}\n            alt={cryptocurrency.name}\n            />\n            <div className=\"card__name\">{cryptocurrency.name}</div>\n            {/* <div className=\"current__price\">  Price</div> */}\n            <div className=\"card__price\">\n            {\" \"}\n            USD: {\"  \"}\n            {cryptocurrency.current_price}\n            {/* <div className=\"card__price\"> USD:  {\"  \"}{cryptocurrency.market_data.current_price.usd.toLocaleString(\"en-US\",currencyObj)}  */}\n            <hr />\n            {/* BTC: ₿{cryptocurrency.market_data.current_price.btc} */}\n            {/* <hr/>  */}\n            {/* ETH: {cryptocurrency.market_data.current_price.eth} */}\n            {/* <hr/>     */}\n            </div>\n        </div>\n        ))}\n    </div>\n        <CryptoDataDisplay />\n    </div>\n);\n};\n\n//===================================================================================//\n//===================================================================================//\nconst mapStateToProps = (state) => {\nreturn {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay\n};\n};\n\n//===================================================================================//\n//===================================================================================//\n\nexport default connect(mapStateToProps, { setCryptoData, showCryptoData,getCryptoPriceHistory })(\nCryptoRankingPage\n);\n// export default CryptoRankingPage;\n","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/actions/actionTypes.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/actions/actionCreators.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoDataDisplay/CryptoDataDisplay.js",["75","76","77","78"],"import React, { useEffect } from \"react\";\nimport \"./CryptoDataDisplay.css\";\nimport { connect } from \"react-redux\";\n\nimport {\n  setCryptoData,\n  // addCryptoData,\n  showCryptoData,\n  getCryptoPriceHistory\n} from \"../../store/actions/actionCreators\";\nimport CurrencyConverter from \"../CurrencyConverter/CurrencyConverter\";\nimport Chart from \"../CryptoChart/CryptoChart\"\n\n// <script src=\"https://widgets.coingecko.com/coingecko-coin-converter-widget.js\"></script>\n// <coingecko-coin-converter-widget  coin-id=\"bitcoin\" currency=\"usd\" background-color=\"#ffffff\" font-color=\"#4c4c4c\" locale=\"en\"></coingecko-coin-converter-widget>\n\n//===================================================================================//\n//===================================================================================//\n\nconst CryptoDataDisplay = (props) => {\n  useEffect(() => {\n    // props.showCryptoData(props.selectedCryptoDisplay);\n    props.showCryptoData();\n  }, []);\n\n  console.log(props);\n\n  return (\n    <div className=\"crypto__data__display\">\n      {props.cryptoData.map((cryptocurrency) => {\n\n        if (cryptocurrency.id === props.selectedCryptoDisplay.id) {\n          console.log(cryptocurrency)\n          console.log(props.selectedCryptoDisplay.id)\n\n          let selectedCryptoData = props.selectedCryptoDisplay.data;\n\n          return (\n            <div\n              key={cryptocurrency.id}\n              className=\"crypto__data__display__elements\"\n            >\n              {/*======================================================================================================================== */}\n              <div className=\"crypto__data__display__name__logo\">\n                <img\n                  className=\"crypto__data__display__image\"\n                  // src={selectedCryptoData.image.large}\n                  src={cryptocurrency.image}\n                />\n\n                <h2 className=\"crypto__data__display__name\">\n                  {/* {selectedCryptoData.name} */}\n                  {cryptocurrency.name}\n                </h2>\n                <p className=\"crypto__data__display__symbol\">\n                  {/* {selectedCryptoData.symbol.toUpperCase()} */}\n                  {cryptocurrency.symbol.toUpperCase()}\n                </p>\n\n                <p className=\"crypto__data__display__rank\">\n                  Rank #{cryptocurrency.market_cap_rank}\n                </p>\n\n                {/* <div className=\"crypto__data__display__description\">\n                <h3> What is {selectedCryptoData.name}?</h3>\n                <p >{selectedCryptoData.description.en}</p>\n                </div> */}\n              </div>\n              {/*======================================================================================================================== */}\n              <div className=\"crypto__data__display__numerical__data\">\n                <div className=\"crypto__data__display__current__price\">\n                  $\n                  {/* {selectedCryptoData.market_data.current_price.usd.toLocaleString()} */}\n                  {cryptocurrency.current_price.toLocaleString()}\n                  {/* {selectedCryptoData.market_data.price_change_percentage_24h > 0 ? 'green': 'red'} */}\n                  <span\n                    className=\"crypto__data__display__24h__percentage__change\"\n                    style={{\n                      backgroundColor:\n                        cryptocurrency.price_change_percentage_24h > 0\n                          ? \"green\"\n                          : \"red\",\n                    }}\n                  >\n                    {cryptocurrency.price_change_percentage_24h}\n                    %\n                  </span>\n                </div>\n                <div>\n                  {/*======================================================================================================================== */}\n                </div>\n              </div>\n              <CurrencyConverter />\n       \n              \n\n\n              <Chart/>\n            </div>\n          );\n        }\n      })}\n    </div>\n  );\n};\n\n//===================================================================================//\n//===================================================================================//\nconst mapStateToProps = (state) => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCryptoData,\n  // addCryptoData,\n  showCryptoData,\n  getCryptoPriceHistory\n})(CryptoDataDisplay);\n","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Login/Login.js",["79","80","81","82","83"],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CreateNewAccount/CreateNewAccount.js",["84","85","86","87","88","89"],"import {useState, useRef} from 'react'\nimport axios from 'axios';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport validator from 'validator'\n\n\n\n\n const CreateNewAccount = () => {\n  const [open, setOpen] = useState(false);\n  const emailRef = useRef()\n  const passwordRef = useRef()\n  const userNameRef = useRef()\n  const [emailError, setEmailError] = useState(false)\n\n\n  const [username, setUserName] = useState();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n\n  //=============================================================================================================//\n  //=============================================================================================================//\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n\n  //=============================================================================================================//\n  //=============================================================================================================//\n const createAccountSubmitButton = async (e)=>{\n     \n    e.preventDefault()\n    console.log(e)\n    // if(!validator.isEmail(emailRef.current.value)){\n    //     setEmailError(true)\n    //     return\n    // }else {\n    //     setEmailError(false)\n    // }\n\n    try {\n        console.log('hello');\n        console.log(emailRef.current.value)\n        \n        let success = await axios.post(\"http://localhost:3001/api/users/register\", {\n        username: username,\n          email: email,\n          password: password,\n        //   email: emailRef.current.value,\n        //   password: passwordRef.current.value,\n        //   username: userNameRef.current.value,\n      })\n        console.log(success);\n        //  if(success.status === 200){\n        //      alert('Success, please proceed to login.')\n        //  }\n    } catch (error) {\n        console.log(error);\n    }\n}\n\n\n\n\nreturn (\n    <div>\n\n        <span className=\"create__account__button\" onClick={handleClickOpen}>Create New Account</span>\n\n      <Dialog open={open} onClose={handleClose} fullWidth={true} maxWidth='xs'  aria-labelledby=\"form-dialog-title\">\n        \n        <DialogContent>\n          <DialogTitle id=\"form-dialog-title\"><h1>Create an Account</h1><h3>It's quick and easy.</h3> </DialogTitle>\n          {/* <DialogContentText> */}\n       \n          {/* </DialogContentText> */}\n          {/* <hr/> */}\n\n\n{/* //=============================================================================================================// */}\n{/* //=============================================================================================================// */}\n          <TextField\n            // autoFocus\n            // size='normal'\n            variant='outlined'\n            margin=\"dense\"\n            id=\"username\"\n            label=\"Username\"\n            // type=\"email\"\n            fullWidth\n            inputRef={userNameRef}\n            onChange={e => setUserName(e.target.value)}\n          />\n\n          {/* <hr/> */}\n          <TextField\n\n            // size='normal'\n            variant='outlined'\n            margin=\"dense\"\n            id=\"email\"\n            label=\"Email Address\"\n            type=\"email\"\n            fullWidth\n            inputRef={emailRef}\n            onChange={e => setEmail(e.target.value)}\n          />\n          <br/>\n          <TextField\n            // size='normal'\n            variant='outlined'\n            margin=\"dense\"\n            id=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            fullWidth\n            inputRef={passwordRef}\n            onChange={e => setPassword(e.target.value)}\n          />\n          <TextField\n            // size='normal'\n            variant='outlined'\n            margin=\"dense\"\n            id=\"confirm password\"\n            label=\"Confirm Password\"\n            type=\"password\"\n            fullWidth\n            \n          />\n          {/* <hr/> */}\n\n        <h3>Already have an account? <a href=\"\">Click here to Log In.</a></h3>\n        </DialogContent>\n        {/* <hr/>\n      <hr/>\n      <hr/>\n      <hr/> */}\n\n{/* //=============================================================================================================// */}\n{/* //=============================================================================================================// */}\n\n        <DialogActions>\n          {/* <button  style={{backgroundColor: 'yellow', fontSize:'15px', borderRadius:'7px', padding: '10px', color: 'black'}} onClick={handleClose} >\n           {'<<<< ❌ Sign up Later'}\n          </button> */}\n          <button style={{backgroundColor: 'yellow',  fontSize:'15px', borderRadius:'7px', padding: '10px'}} onClick={createAccountSubmitButton} >\n            Create Account ➕\n          </button>\n        </DialogActions>\n\n      </Dialog>\n    </div>\n\n\n\n  );\n};\n\nexport default CreateNewAccount;","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CurrencyConverter/CurrencyConverter.js",["90"],"import React, { useRef, useEffect } from \"react\";\nimport \"./CurrencyConverter.css\";\nimport { connect } from \"react-redux\";\nimport { showCryptoData } from \"../../store/actions/actionCreators\";\n\n\n//===================================================================================//\n//===================================================================================//\nconst CurrencyConverter = (props) => {\nconst baseCurrencyRef = useRef();\nconst quoteCurrencyRef = useRef();\n\nconst baseCurrencyDropdownRef = useRef()\n//===================================================================================//\n//===================================================================================//\n//   useEffect(() => {\n//     // props.showCryptoData(props.selectedCryptoDisplay);\n//     props.setCryptoData();\n//   }, []);\n\nconsole.log(props);\n\nlet selectedCryptoData = props.selectedCryptoDisplay.data;\n\n\n//===================================================================================//\n//===================================================================================//\nreturn (\n    <div className=\"crypto__data__display__currency__converter\">\n    <h3>Cryptocurrency Converter Calculator</h3>\n    {/* ========================================================================================================== */}\n\n\n    <input\n        className=\"base__currency__input\"\n        placeholder=\"1\"\n        ref={baseCurrencyRef}\n        onChange={() => {\n        quoteCurrencyRef.current.value = baseCurrencyRef.current.value * selectedCryptoData.market_data.current_price.usd  ;\n        }}\n    />\n    \n    <select className=\"base__currency__dropdown\" onChange={()=>{\n        console.log(props)\n        // if(props.)\n            }}\n        >\n        <option>{selectedCryptoData.symbol.toUpperCase()} </option>\n\n        {props.cryptoData.map((value) => {\n        return (\n            <option value={value.id}>\n            {value.name} ({value.symbol.toUpperCase()})\n            </option>\n        );\n        })}\n    </select>\n\n\n    <div>=</div>\n\n    <input\n        className=\"quote__currency__input\"\n        type=\"number\"\n        placeholder={selectedCryptoData.market_data.current_price.usd}\n        ref={quoteCurrencyRef}\n        onChange={() => {\n        baseCurrencyRef.current.value = quoteCurrencyRef.current.value / selectedCryptoData.market_data.current_price.usd ;\n        \n        }}\n       \n    />\n    <select className=\"quote__currency__dropdown\" onChange={()=>{console.log(baseCurrencyDropdownRef.current.value) \n        props.showCryptoData(baseCurrencyDropdownRef.current.value)}}  ref={baseCurrencyDropdownRef}>\n        <option>USD </option>\n\n        {props.cryptoData.map((value) => {\n        return <option  key={value.id} value={value.id}>{value.symbol.toUpperCase()}</option>;\n        })}\n    </select>\n    {/* ========================================================================================================== */}\n\n   \n    </div>\n);\n};\n//===================================================================================//\n//===================================================================================//\nconst mapStateToProps = (state) => {\nreturn {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay,\n};\n};\n//===================================================================================//\n//===================================================================================//\nexport default connect(mapStateToProps, { showCryptoData })(CurrencyConverter);\n","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoChart/CryptoChart.js",["91","92"],"import React, {useRef, useEffect} from \"react\";\nimport Chart from \"chart.js/auto\";\nimport {connect} from \"react-redux\";\nimport {\n    setCryptoData,\n    // addCryptoData,\n    showCryptoData,\n    getCryptoPriceHistory\n    } from \"../../store/actions/actionCreators\";\n\n\nconst CryptoChart = (props) => {\n\n    \n    const prices =()=> props.selectedCryptoDisplay.priceHistory.map((price)=>{\n        console.log(price[1])\n        return price[1]\n    })\n    const dates =()=> props.selectedCryptoDisplay.priceHistory.map((date)=>{\n        \n        return date[0]\n    })\n    \n    console.log(props)\n    const chartRef = useRef()\n    \n            // props.getCryptoPriceHistory(props.selectedCryptoDisplay.name)\n\n    useEffect(()=>{\n        props.getCryptoPriceHistory(props.selectedCryptoDisplay.data.id);\n\n\n// const prices = props.selectedCryptoDisplay.priceHistory.map((price)=>{\n//     return price[1]\n// })\n// const dates = props.selectedCryptoDisplay.priceHistory.map((date)=>{\n//     return date[0]\n// })\n\nconsole.log(prices)\n\n\n        if(chartRef && chartRef.current){\n            const chartInstance = new Chart (chartRef.current, \n                {\n                    type: 'line',\n                    data: {\n                        // labels: cryptoDatesArray(),\n                        labels: dates(),\n                        datasets: [{\n                            label: `${props.selectedCryptoDisplay.name} / United States Dollar\n                                        ${props.selectedCryptoDisplay.data.symbol.toUpperCase()} /  USD`, \n                            // data: [12, 19, 3, 5, 2, 3],\n                            data: prices(),\n                            backgroundColor: [\n                                'rgba(255, 99, 132, 0.2)',\n                                'rgba(54, 162, 235, 0.2)',\n                                'rgba(255, 206, 86, 0.2)',\n                                'rgba(75, 192, 192, 0.2)',\n                                'rgba(153, 102, 255, 0.2)',\n                                'rgba(255, 159, 64, 0.2)'\n                            ],\n                            borderColor: [\n                                'rgba(255, 99, 132, 1)',\n                                'rgba(54, 162, 235, 1)',\n                                'rgba(255, 206, 86, 1)',\n                                'rgba(75, 192, 192, 1)',\n                                'rgba(153, 102, 255, 1)',\n                                'rgba(255, 159, 64, 1)'\n                            ],\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n                        scales: {\n                            y: {\n                                beginAtZero: true\n                            }\n                        }\n                    }\n                }\n                )\n                // chartInstance.destroy()\n\n            }\n    },[])\n  return (\n    <div className=\"crypto__data__display__chart\">\n      <canvas id=\"myChart\" width='250' height=\"100\" ref={chartRef}></canvas>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state)=> {\n    return {\n        cryptoData: state.cryptoData,\n        selectedCryptoDisplay:state.selectedCryptoDisplay\n    }\n}\n\nexport default connect(mapStateToProps, {setCryptoData, showCryptoData, getCryptoPriceHistory})(CryptoChart);\n","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/UserProfile/UserProfile.js",["93"],"import React from \"react\";\nimport './UserProfile.css'\n\nconst UserProfile = () => {\n  return (\n    <div>\n      <div>\n        <button>Click here!</button>\n      </div>\n\n      <div className=\"user__profile__container\">\n        <div className=\"user__profile__stats\">\n            <img/>\n            <h1>Profile Name</h1>\n            <h3>Following <br/>100</h3>\n            <h3>Followers <br/>100</h3>\n\n            <h2>Collection Rank #:1</h2>\n            <h2>Highest Rank #:1</h2>\n            <h2>Lowest Rank #:1</h2>\n        </div>\n\n        <div className=\"user__profile__feed\">\n\n        </div>\n\n        <div className=\"user__crypto__collection\">\n        <h1>\n            Collection Value \n        </h1>\n        <h1>\n            $4,419,000\n        </h1>\n        </div>\n        \n\n      </div>\n    </div>\n  );\n};\n\nexport default UserProfile;\n","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Search/Search.js",["94","95"],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":7,"column":8,"nodeType":"102","messageId":"103","endLine":7,"endColumn":19},{"ruleId":"100","severity":1,"message":"104","line":1,"column":28,"nodeType":"102","messageId":"103","endLine":1,"endColumn":34},{"ruleId":"100","severity":1,"message":"105","line":11,"column":8,"nodeType":"102","messageId":"103","endLine":11,"endColumn":25},{"ruleId":"106","severity":1,"message":"107","line":21,"column":3,"nodeType":"108","endLine":21,"endColumn":5,"suggestions":"109"},{"ruleId":"106","severity":1,"message":"107","line":24,"column":6,"nodeType":"108","endLine":24,"endColumn":8,"suggestions":"110"},{"ruleId":"111","severity":1,"message":"112","line":30,"column":46,"nodeType":"113","messageId":"114","endLine":30,"endColumn":48},{"ruleId":"100","severity":1,"message":"115","line":36,"column":15,"nodeType":"102","messageId":"103","endLine":36,"endColumn":33},{"ruleId":"116","severity":1,"message":"117","line":45,"column":17,"nodeType":"118","endLine":49,"endColumn":19},{"ruleId":"100","severity":1,"message":"119","line":2,"column":8,"nodeType":"102","messageId":"103","endLine":2,"endColumn":17},{"ruleId":"100","severity":1,"message":"120","line":4,"column":8,"nodeType":"102","messageId":"103","endLine":4,"endColumn":14},{"ruleId":"100","severity":1,"message":"121","line":44,"column":10,"nodeType":"102","messageId":"103","endLine":44,"endColumn":18},{"ruleId":"100","severity":1,"message":"122","line":45,"column":17,"nodeType":"102","messageId":"103","endLine":45,"endColumn":25},{"ruleId":"123","severity":1,"message":"124","line":154,"column":43,"nodeType":"118","endLine":154,"endColumn":54},{"ruleId":"100","severity":1,"message":"120","line":3,"column":8,"nodeType":"102","messageId":"103","endLine":3,"endColumn":14},{"ruleId":"100","severity":1,"message":"125","line":8,"column":8,"nodeType":"102","messageId":"103","endLine":8,"endColumn":25},{"ruleId":"100","severity":1,"message":"126","line":10,"column":8,"nodeType":"102","messageId":"103","endLine":10,"endColumn":17},{"ruleId":"100","severity":1,"message":"127","line":20,"column":10,"nodeType":"102","messageId":"103","endLine":20,"endColumn":20},{"ruleId":"100","severity":1,"message":"128","line":20,"column":22,"nodeType":"102","messageId":"103","endLine":20,"endColumn":35},{"ruleId":"123","severity":1,"message":"124","line":143,"column":38,"nodeType":"118","endLine":143,"endColumn":49},{"ruleId":"100","severity":1,"message":"129","line":1,"column":25,"nodeType":"102","messageId":"103","endLine":1,"endColumn":34},{"ruleId":"100","severity":1,"message":"130","line":44,"column":19,"nodeType":"102","messageId":"103","endLine":44,"endColumn":32},{"ruleId":"106","severity":1,"message":"131","line":86,"column":7,"nodeType":"108","endLine":86,"endColumn":9,"suggestions":"132"},{"ruleId":"116","severity":1,"message":"117","line":13,"column":13,"nodeType":"118","endLine":13,"endColumn":19},{"ruleId":"133","severity":1,"message":"134","line":17,"column":7,"nodeType":"135","messageId":"136","endLine":21,"endColumn":24},{"ruleId":"133","severity":1,"message":"134","line":22,"column":7,"nodeType":"135","messageId":"136","endLine":22,"endColumn":24},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-unused-vars","'UserProfile' is defined but never used.","Identifier","unusedVar","'useRef' is defined but never used.","'cryptoDataReducer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["139"],["140"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'selectedCryptoData' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'PropTypes' is defined but never used.","'Button' is defined but never used.","'username' is assigned a value but never used.","'setEmail' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'DialogContentText' is defined but never used.","'validator' is defined but never used.","'emailError' is assigned a value but never used.","'setEmailError' is assigned a value but never used.","'useEffect' is defined but never used.","'chartInstance' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dates', 'prices', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["141"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"142","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [props]",{"range":"147","text":"148"},{"range":"149","text":"148"},"Update the dependencies array to be: [dates, prices, props]",{"range":"150","text":"151"},[666,668],"[props]",[954,956],[2916,2918],"[dates, prices, props]"]