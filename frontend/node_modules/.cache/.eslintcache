[{"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/index.js":"1","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/App.js":"2","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/reportWebVitals.js":"3","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/reducers/cryptoDataReducer.js":"4","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Navbar/Navbar.js":"5","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoRankingPage/CryptoRankingPage.js":"6","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/actions/actionTypes.js":"7","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/actions/actionCreators.js":"8","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoDataDisplay/CryptoDataDisplay.js":"9","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Login/Login.js":"10","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CreateNewAccount/CreateNewAccount.js":"11","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CurrencyConverter/CurrencyConverter.js":"12","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoChart/CryptoChart.js":"13","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/UserProfile/UserProfile.js":"14","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Search/Search.js":"15"},{"size":915,"mtime":1617987621700,"results":"16","hashOfConfig":"17"},{"size":826,"mtime":1619112492408,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1617909909456,"results":"19","hashOfConfig":"17"},{"size":4806,"mtime":1619565508074,"results":"20","hashOfConfig":"17"},{"size":1718,"mtime":1619289454963,"results":"21","hashOfConfig":"17"},{"size":5789,"mtime":1619618753536,"results":"22","hashOfConfig":"17"},{"size":329,"mtime":1619484570117,"results":"23","hashOfConfig":"17"},{"size":4490,"mtime":1619486166003,"results":"24","hashOfConfig":"17"},{"size":4707,"mtime":1619448044956,"results":"25","hashOfConfig":"17"},{"size":6275,"mtime":1619475780758,"results":"26","hashOfConfig":"17"},{"size":6412,"mtime":1619620722859,"results":"27","hashOfConfig":"17"},{"size":3564,"mtime":1619539852007,"results":"28","hashOfConfig":"17"},{"size":3462,"mtime":1619287359111,"results":"29","hashOfConfig":"17"},{"size":836,"mtime":1618948582551,"results":"30","hashOfConfig":"17"},{"size":4979,"mtime":1619536340842,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1hi5gwe",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/index.js",[],["70","71"],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/App.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/reportWebVitals.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/reducers/cryptoDataReducer.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Navbar/Navbar.js",["72"],"import React from \"react\";\nimport \"./Navbar.css\";\nimport { Link } from \"react-router-dom\";\n\nimport CreateNewAccount from \"../CreateNewAccount/CreateNewAccount\";\nimport Login from \"../Login/Login\";\nimport UserProfile from \"../UserProfile/UserProfile\";\nimport Search from \"../Search/Search\"\n\nconst Navbar = () => {\n  return (\n    // <Router>\n    <div>\n      <nav className=\"header__navigator\">\n        <p className=\"header__logo\">\n          <Link className=\"link\" to=\"/\">\n            {\" \"}\n            CRYPTO COLLECTION. <br />\n            LINK\n          </Link>\n        </p>\n      <Search/>\n        <div className=\"registration__buttons\">\n          {/* <Link className=\"link\" to=\"/login\"> */}\n            <Login />\n          {/* </Link> */}\n\n          {/* <Link className=\"link\" to=\"/register\"> */}\n            <CreateNewAccount />\n          {/* </Link> */}\n      {/* <Link className=\"link\" to=\"/profile\" > */}\n      \n      {/* <UserProfile/> */}\n      {/* </Link> */}\n        </div>\n      </nav>\n\n      <div>\n        <nav className=\"router__tabs\">\n          <Link className=\"link\" to=\"/profile\">\n            <div className=\"my__collection__tab\">\n              <span className=\"tab__text\"> My Profile</span>\n            </div>\n          </Link>\n\n          <Link className=\"link\" to=\"/watchlist\">\n            <div className=\"my__watchlist__tab\">\n              <span className=\"tab__text\">My Watchlist</span>\n            </div>\n          </Link>\n\n          <Link className=\"link\" to=\"/shop\">\n            <div className=\"shop__tab\">\n              <span className=\"tab__text\">Get T-Shirt</span>\n            </div>\n          </Link>\n        </nav>\n      </div>\n    </div>\n    /* </Router> */\n  );\n};\n\nexport default Navbar;\n","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoRankingPage/CryptoRankingPage.js",["73","74","75"],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/actions/actionTypes.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/store/actions/actionCreators.js",[],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoDataDisplay/CryptoDataDisplay.js",["76","77","78","79"],"import React, { useEffect } from \"react\";\nimport \"./CryptoDataDisplay.css\";\nimport { connect } from \"react-redux\";\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport StarIcon from '@material-ui/icons/Star';\nimport {\n  setCryptoData,\n  // addCryptoData,\n  showCryptoData,\n  getCryptoPriceHistory,\n} from \"../../store/actions/actionCreators\";\nimport CurrencyConverter from \"../CurrencyConverter/CurrencyConverter\";\nimport Chart from \"../CryptoChart/CryptoChart\";\n\n// <script src=\"https://widgets.coingecko.com/coingecko-coin-converter-widget.js\"></script>\n// <coingecko-coin-converter-widget  coin-id=\"bitcoin\" currency=\"usd\" background-color=\"#ffffff\" font-color=\"#4c4c4c\" locale=\"en\"></coingecko-coin-converter-widget>\n\n//===================================================================================//\n//===================================================================================//\n\nconst CryptoDataDisplay = (props) => {\n  useEffect(() => {\n    // props.showCryptoData(props.selectedCryptoDisplay);\n    props.showCryptoData(); \n  }, []);\n\n  // console.log(props);\n\n  return (\n    <div className=\"crypto__data__display\">\n      {props.cryptoData.map((cryptocurrency) => {\n        if (cryptocurrency.id === props.selectedCryptoDisplay.id) {\n          // console.log(cryptocurrency);\n          console.log(props.selectedCryptoDisplay);\n\n          // let selectedCryptoData = props.selectedCryptoDisplay.data;\n\n          return (\n            <div\n              key={cryptocurrency.id}\n              className=\"crypto__data__display__elements\"\n            >\n              {/*======================================================================================================================== */}\n              <div className=\"crypto__data__display__name__logo\">\n                <img\n                  className=\"crypto__data__display__image\"\n                  // src={selectedCryptoData.image.large}\n                  src={cryptocurrency.image}\n                />\n\n                <h2 className=\"crypto__data__display__name\">\n                  {/* {selectedCryptoData.name} */}\n                  {cryptocurrency.name}\n                </h2>\n                <p className=\"crypto__data__display__symbol\">\n                  {/* {selectedCryptoData.symbol.toUpperCase()} */}\n                  {cryptocurrency.symbol.toUpperCase()}\n                  <div className=\"favorite__icon\"> {<StarBorderIcon/>}</div>\n                </p>\n\n                <p className=\"crypto__data__display__rank\">\n                  Rank #{cryptocurrency.market_cap_rank}\n                </p>\n\n                {/*                <div className=\"crypto__data__display__description\">\n                <h3> What is {selectedCryptoData.name}?</h3>\n                <p >{selectedCryptoData.description.en}</p>\n                </div> */}\n              </div>\n              {/*======================================================================================================================== */}\n              <div className=\"crypto__data__display__numerical__data\">\n                <div className=\"crypto__data__display__current__price\">\n                  $\n                  {/* {selectedCryptoData.market_data.current_price.usd.toLocaleString()} */}\n                  {cryptocurrency.current_price.toLocaleString()}\n                  {/* {selectedCryptoData.market_data.price_change_percentage_24h > 0 ? 'green': 'red'} */}\n                  <span\n                    className=\"crypto__data__display__24h__percentage__change\"\n                    style={{\n                      backgroundColor:\n                        cryptocurrency.price_change_percentage_24h > 0\n                          ? \"green\"\n                          : \"red\",\n                    }}\n                  >\n                    {cryptocurrency.price_change_percentage_24h}%\n                  </span>\n                </div>\n                <div>\n                  {/*======================================================================================================================== */}\n                </div>\n              </div>\n              <CurrencyConverter />\n\n              <Chart />\n            </div>\n          );\n        }\n      })}\n    </div>\n  );\n};\n\n//===================================================================================//\n//===================================================================================//\nconst mapStateToProps = (state) => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  setCryptoData,\n  // addCryptoData,\n  showCryptoData,\n  getCryptoPriceHistory,\n})(CryptoDataDisplay);\n","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Login/Login.js",["80","81","82","83","84","85"],"import {useState} from 'react'\nimport { Link } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport axios from 'axios'\nimport jwt_decode from \"jwt-decode\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n\n\n\n\n//=============================================================================================================//\n//=============================================================================================================//\n\n// async function loginUser(credentials) {\n//   // return fetch('http://127.0.0.1:8080/api/signin', {\n//   return fetch('/api/signin', {\n\n//     method: 'POST',\n//     headers: {\n//       'Content-Type': 'application/json'\n//     },\n//     body: JSON.stringify(credentials)\n//   })\n//     .then(data => data.json())\n    \n//     //  axios.create({\n//     //    baseURL: 'api',\n//     //    timeout: 5000\n//     //  })\n//  }\n\n\n//=============================================================================================================//\n//=============================================================================================================//\n\n\n\n const Login = () => {\n  const [open, setOpen] = useState(false);\n  const [username, setUserName] = useState();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n\n  //=============================================================================================================//\n  //=============================================================================================================//\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  //=============================================================================================================//\n  //=============================================================================================================//\n  // const userToken = window.localStorage.jwtToken\n  // let decodedJwtToken =  jwt_decode(window.localStorage.getItem(\"jwtToken\"))\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n\n    console.log('hello');\n    \n\n\n    try {\n        let success = await axios.post(\"http://localhost:3001/api/users/login\", {\n\n        // username: username,\n        email:email,\n        password:password\n            // email: emailRef.current.value,\n            // password: passwordRef.current.value,\n        })\n        console.log(success)\n\n        // console.log(success.data.token);\n        // console.log(jwt_decode(success.data.token))\n        window.localStorage.setItem(\"jwtToken\", success.data.token)\n        // const userToken = window.localStorage.jwtToken\n        // const decodedJwtToken =  jwt_decode(userToken)\n        // props.history.push('/rankings')\n    } catch (error) {\n\n        console.log({message: \"please enter email and password\" , error: error});\n        // setErrorMessage(true)\n    } \n  \n\n  }\nconst checkForToken =()=>{\nif(window.localStorage.getItem('jwtToken')){\n// console.log('hter')\n  let token = window.localStorage.getItem(\"jwtToken\")\n  let decoded = jwt_decode(token)\n  // console.log(decoded.email)\n  // return window.localStorage.getItem('jwtToken')\n  return decoded.email\n  // window.localStorage.getItem('jwtToken')?window.localStorage.jwtToken.email: 'Login'\n}\nelse return 'Login'\n}\n\n// console.log(checkForToken())\n//=============================================================================================================//\n//=============================================================================================================//\n\nreturn (\n    <div>\n\n    {/* <span className=\"login__button\" onClick={handleClickOpen}>Login</span> */}\n\n    {/* <span className=\"login__button\" onClick={handleClickOpen}>{userToken?window.localStorage.jwtToken.email: 'Login'}</span> */}\n    <span className=\"login__button\" onClick={handleClickOpen}>{checkForToken()}</span>\n \n      <Dialog open={open} onClose={handleClose}  aria-labelledby=\"form-dialog-title\"\n       fullWidth={true} maxWidth='xs'\n      >\n\n\n        <DialogContent>\n          <DialogTitle id=\"form-dialog-title\"><h1> Log In </h1> <h3>Sign In to an existing account.</h3></DialogTitle>\n          \n          {/* <DialogContentText>\n            <h3>New to Crypto Collection? <a href=\"\">Create an Account here.</a></h3>\n\n          </DialogContentText> */}\n\n          {/* <TextField\n            variant='outlined'\n            margin=\"dense\"\n            id=\"username\"\n            label=\"Username or Email\"\n            type=\"email\"\n            fullWidth\n            onChange={e => setUserName(e.target.value)}\n          /> */}\n\n          {/* <hr/> */}\n          <TextField\n            variant='outlined'\n            margin=\"dense\"\n            id=\"email\"\n            label=\"Email Address\"\n            type=\"email\"\n            fullWidth\n            onChange={e => setEmail(e.target.value)}\n          />\n          {/* <hr/> */}\n          <TextField\n            variant='outlined'\n            margin=\"dense\"\n            id=\"password\"\n            label=\"Password\"\n            type=\"email\"\n            fullWidth\n            onChange={e => setPassword(e.target.value)}\n          />\n        \n\n            <DialogContentText>\n            <h3>New to Crypto Collection? <a href=\"\">Create an Account here.</a></h3>\n\n          </DialogContentText>\n\n\n        </DialogContent> \n\n\n\n        \n\n        <DialogActions>\n          {/* <button  style={{backgroundColor: 'gold', fontSize:'15px', borderRadius:'7px', padding: '10px'}} onClick={handleClose} >\n          ❌ Cancel\n          </button> */}\n          <button style={{backgroundColor: 'yellow',  fontSize:'15px', borderRadius:'7px', padding: '10px'}} \n            onClick={handleSubmit} >\n           Login 🔑 🚪\n          </button>\n        </DialogActions>\n   \n      </Dialog>\n    </div>\n    // </div>\n  );\n};\n\n\n// Login.propTypes = {\n//   setToken: PropTypes.func.isRequired\n// }\n\n\n\n\nexport default Login;","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CreateNewAccount/CreateNewAccount.js",["86","87","88","89","90","91","92","93","94","95","96","97"],"/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CurrencyConverter/CurrencyConverter.js",["98"],"import React, { useRef, useEffect } from \"react\";\nimport \"./CurrencyConverter.css\";\nimport { connect } from \"react-redux\";\nimport { showCryptoData } from \"../../store/actions/actionCreators\";\n\n\n//===================================================================================//\n//===================================================================================//\nconst CurrencyConverter = (props) => {\nconst baseCurrencyRef = useRef();\nconst quoteCurrencyRef = useRef();\n\nconst baseCurrencyDropdownRef = useRef()\n//===================================================================================//\n//===================================================================================//\n//   useEffect(() => {\n//     // props.showCryptoData(props.selectedCryptoDisplay);\n//     props.setCryptoData();\n//   }, []);\n\n\n\nlet selectedCryptoData = props.selectedCryptoDisplay.data;\n\n\n//===================================================================================//\n//===================================================================================//\nreturn (\n    <div className=\"crypto__data__display__currency__converter\">\n    <h3>Cryptocurrency Converter Calculator</h3>\n    {/* ========================================================================================================== */}\n\n\n    <input\n        className=\"base__currency__input\"\n        placeholder=\"1\"\n        ref={baseCurrencyRef}\n        onChange={() => {\n        quoteCurrencyRef.current.value = baseCurrencyRef.current.value * selectedCryptoData.market_data.current_price.usd  ;\n        }}\n    />\n    \n    <select className=\"base__currency__dropdown\" onChange={()=>{\n        // console.log(props)\n        // if(props.)\n            }}\n        >\n        <option>{selectedCryptoData.symbol.toUpperCase()} </option>\n\n        {props.cryptoData.map((value) => {\n        return (\n            <option \n            key={value.id}\n            value={value.id}>\n            {value.name} ({value.symbol.toUpperCase()})\n            </option>\n        );\n        })}\n    </select>\n\n\n    <div>=</div>\n\n    <input\n        className=\"quote__currency__input\"\n        type=\"number\"\n        placeholder={selectedCryptoData.market_data.current_price.usd}\n        ref={quoteCurrencyRef}\n        onChange={() => {\n        baseCurrencyRef.current.value = quoteCurrencyRef.current.value / selectedCryptoData.market_data.current_price.usd ;\n        \n        }}\n       \n    />\n    <select className=\"quote__currency__dropdown\" onChange={()=>{console.log(baseCurrencyDropdownRef.current.value) \n        props.showCryptoData(baseCurrencyDropdownRef.current.value)}}  ref={baseCurrencyDropdownRef}>\n        <option>USD </option>\n\n        {props.cryptoData.map((value) => {\n        return <option  key={value.id} value={value.id}>{value.symbol.toUpperCase()}</option>;\n        })}\n    </select>\n    {/* ========================================================================================================== */}\n\n   \n    </div>\n);\n};\n//===================================================================================//\n//===================================================================================//\nconst mapStateToProps = (state) => {\nreturn {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay,\n};\n};\n//===================================================================================//\n//===================================================================================//\nexport default connect(mapStateToProps, { showCryptoData })(CurrencyConverter);\n","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/CryptoChart/CryptoChart.js",["99","100"],"import React, {useRef, useEffect} from \"react\";\nimport Chart from \"chart.js/auto\";\nimport {connect} from \"react-redux\";\nimport {\n    setCryptoData,\n    // addCryptoData,\n    showCryptoData,\n    getCryptoPriceHistory\n    } from \"../../store/actions/actionCreators\";\n\n\nconst CryptoChart = (props) => {\n\n    \n    const prices =()=> props.selectedCryptoDisplay.priceHistory.map((price)=>{\n\n        return price[1]\n    })\n    const dates =()=> props.selectedCryptoDisplay.priceHistory.map((date)=>{\n        const milliseconds = date[0] * 1000\n        const dateObject = new Date(milliseconds)\n        const humanDateFormat = dateObject.toLocaleString()\n         \n        // return date[0]\n        return humanDateFormat\n    })\n    \n\n    const chartRef = useRef()\n    \n            // props.getCryptoPriceHistory(props.selectedCryptoDisplay.name)\n\n    useEffect(()=>{\n        props.getCryptoPriceHistory(props.selectedCryptoDisplay.data.id);\n\n\n// const prices = props.selectedCryptoDisplay.priceHistory.map((price)=>{\n//     return price[1]\n// })\n// const dates = props.selectedCryptoDisplay.priceHistory.map((date)=>{\n//     return date[0]\n// })\n\n\n\n\n        if(chartRef && chartRef.current){\n            const chartInstance = new Chart (chartRef.current, \n                {\n                    type: 'line',\n                    data: {\n                        // labels: cryptoDatesArray(),\n                        labels: dates(),\n                        datasets: [{\n                            label: `${props.selectedCryptoDisplay.name} / United States Dollar\n                                        ${props.selectedCryptoDisplay.data.symbol.toUpperCase()} /  USD`, \n                            // data: [12, 19, 3, 5, 2, 3],\n                            data: prices(),\n                            backgroundColor: [\n                                'rgba(255, 99, 132, 0.2)',\n                                'rgba(54, 162, 235, 0.2)',\n                                'rgba(255, 206, 86, 0.2)',\n                                'rgba(75, 192, 192, 0.2)',\n                                'rgba(153, 102, 255, 0.2)',\n                                'rgba(255, 159, 64, 0.2)'\n                            ],\n                            borderColor: [\n                                'rgba(255, 99, 132, 1)',\n                                'rgba(54, 162, 235, 1)',\n                                'rgba(255, 206, 86, 1)',\n                                'rgba(75, 192, 192, 1)',\n                                'rgba(153, 102, 255, 1)',\n                                'rgba(255, 159, 64, 1)'\n                            ],\n                            borderWidth: 1\n                        }]\n                    },\n                    options: {\n                        scales: {\n                            y: {\n                                beginAtZero: true\n                            }\n                        }\n                    }\n                }\n                )\n                // chartInstance.destroy()\n\n            }\n    },[])\n  return (\n    <div className=\"crypto__data__display__chart\">\n      <canvas id=\"myChart\" width='300' height=\"160\" ref={chartRef}></canvas>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state)=> {\n    return {\n        cryptoData: state.cryptoData,\n        selectedCryptoDisplay:state.selectedCryptoDisplay\n    }\n}\n\nexport default connect(mapStateToProps, {setCryptoData, showCryptoData, getCryptoPriceHistory})(CryptoChart);\n","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/UserProfile/UserProfile.js",["101"],"import React from \"react\";\nimport './UserProfile.css'\n\nconst UserProfile = () => {\n  return (\n    <div>\n      <div>\n        <button>Click here!</button>\n      </div>\n\n      <div className=\"user__profile__container\">\n        <div className=\"user__profile__stats\">\n            <img/>\n            <h1>Profile Name</h1>\n            <h3>Following <br/>100</h3>\n            <h3>Followers <br/>100</h3>\n\n            <h2>Collection Rank #:1</h2>\n            <h2>Highest Rank #:1</h2>\n            <h2>Lowest Rank #:1</h2>\n        </div>\n\n        <div className=\"user__profile__feed\">\n\n        </div>\n\n        <div className=\"user__crypto__collection\">\n        <h1>\n            Collection Value \n        </h1>\n        <h1>\n            $4,419,000\n        </h1>\n        </div>\n        \n\n      </div>\n    </div>\n  );\n};\n\nexport default UserProfile;\n","/Users/danieljames/CodeImmersives-WebDev/Projects/crypto-collection-link/frontend/src/components/Search/Search.js",["102","103"],"import React, { useEffect, useRef } from \"react\";\nimport \"./Search.css\";\nimport { connect } from \"react-redux\";\nimport { setCryptoData, getAllUsers ,showCryptoData,showUserProfile} from \"../../store/actions/actionCreators\";\n\nimport Select from \"react-select\";\n// import { colourOptions } from \"./docs/data\";\n\nconst Search = (props) => {\n  useEffect(()=>{\n    // props.getAllUsers()\n    searchFilter()\n  },[])\n\n  const searchRef = useRef();\n  console.log(props);\n\n\n  let cryptocurrenciesObj={}\n  let peopleObj={}\n\n  //===================================================================================//\n  //===================================================================================//\n  const cryptos = props.cryptoData.map((value) => {\n    // console.log(value)\n      const newObj = {\n        value: value.id,\n        label: `${value.name} (${value.symbol.toUpperCase()})`,\n      };\n      cryptocurrenciesObj = newObj\n      return cryptocurrenciesObj;\n    });\n  \n  // console.log(cryptocurrenciesObj)\n  //===================================================================================//\n  //===================================================================================//\n\n  const users = props.userData.map((value) => {\n    // console.log(value)\n    const newObj = {\n      value: value._id,\n      label: `@${value.username}`,\n    };\n    peopleObj = newObj\n    \n    return peopleObj;\n  });\n  //===================================================================================//\n  //===================================================================================//\n\n\n  const searchFilter = (id) => { \n    // console.log(searchRef.current.state.value)\n    const dropdownSearchOptions = searchRef.current.props.options;\n    let cryptocurrencies = {};\n    let people = {};\n    dropdownSearchOptions.map((searchOptions) => {\n\n      if (searchOptions.label === \"Cryptocurrencies\") {\n        cryptocurrencies = searchOptions;\n\n\n        return cryptocurrencies;\n      }\n      if (searchOptions.label === \"People\") {\n        people = searchOptions;\n        return people;\n      }\n    });\n    cryptocurrencies.options.map((value)=>{\n      // id=value.value\n      cryptocurrenciesObj=value\n      return cryptocurrenciesObj\n    })\n    people.options.map((value)=>{\n      peopleObj = value\n      return peopleObj\n    })\n\n  };\n  //===================================================================================//\n  //===================================================================================//\n\n\n  const groupedOptions = [\n    {\n      label: \"People\",\n\n      options: users,\n    },\n    {\n      label: \"Cryptocurrencies\",\n      options: cryptos,\n      // options: cryptocurrenciesObj,\n    },\n  ];\n  //===================================================================================//\n  //===================================================================================//\n\n  const groupStyles = {\n    display: \"flex\",\n    fontSize: 13,\n    // backgroundColor: \"#EBECF0\",\n    backgroundColor: \"#5DB268\",\n    color: \"white\",\n    padding: \"1em 1em\",\n    // display: 'grid',\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n  };\n  //===================================================================================//\n  //===================================================================================//\n\n  const groupBadgeStyles = {\n    backgroundColor: \"#EBECF0\",\n    borderRadius: \"2em\",\n    color: \"#172B4D\",\n    display: \"inline-block\",\n    fontSize: 13,\n    fontWeight: \"normal\",\n    lineHeight: \"1\",\n    minWidth: 1,\n    padding: \"0.16666666666667em 0.5em\",\n    // padding: '10em 10em',\n    textAlign: \"center\",\n  };\n  //===================================================================================//\n  //===================================================================================//\n\n  const formatGroupLabel = (data) => (\n    <div style={groupStyles}>\n      <span>{data.label}</span>\n      <span style={groupBadgeStyles}>{data.options.length}</span>\n    </div>\n  );\n  //==================================================================================//\n  //===================================================================================//\n\n  return (\n    <Select\n\n      options={groupedOptions}\n\n      formatGroupLabel={formatGroupLabel}\n      onChange={(e) => {\n\n        e.label[0]==='@' ? props.showUserProfile(e.value) :props.showCryptoData(e.value)\n      \n        // showUserProfile(e.value)\n\n      }}\n      ref={searchRef}\n    />\n  );\n};\n\n//===================================================================================//\n//===================================================================================//\nconst mapStateToProps = (state) => {\n  return {\n    cryptoData: state.cryptoData,\n    selectedCryptoDisplay: state.selectedCryptoDisplay,\n    userData: state.userData,\n  };\n};\n\nexport default connect(mapStateToProps, { setCryptoData, getAllUsers,showCryptoData,showUserProfile })(Search);\n",{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":7,"column":8,"nodeType":"110","messageId":"111","endLine":7,"endColumn":19},{"ruleId":"108","severity":1,"message":"112","line":4,"column":8,"nodeType":"110","messageId":"111","endLine":4,"endColumn":22},{"ruleId":"108","severity":1,"message":"113","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":16},{"ruleId":"114","severity":1,"message":"115","line":27,"column":8,"nodeType":"116","endLine":27,"endColumn":10,"suggestions":"117"},{"ruleId":"108","severity":1,"message":"113","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":16},{"ruleId":"114","severity":1,"message":"115","line":25,"column":6,"nodeType":"116","endLine":25,"endColumn":8,"suggestions":"118"},{"ruleId":"119","severity":1,"message":"120","line":31,"column":46,"nodeType":"121","messageId":"122","endLine":31,"endColumn":48},{"ruleId":"123","severity":1,"message":"124","line":45,"column":17,"nodeType":"125","endLine":49,"endColumn":19},{"ruleId":"108","severity":1,"message":"126","line":2,"column":10,"nodeType":"110","messageId":"111","endLine":2,"endColumn":14},{"ruleId":"108","severity":1,"message":"127","line":3,"column":8,"nodeType":"110","messageId":"111","endLine":3,"endColumn":17},{"ruleId":"108","severity":1,"message":"128","line":6,"column":8,"nodeType":"110","messageId":"111","endLine":6,"endColumn":14},{"ruleId":"108","severity":1,"message":"129","line":47,"column":10,"nodeType":"110","messageId":"111","endLine":47,"endColumn":18},{"ruleId":"108","severity":1,"message":"130","line":47,"column":20,"nodeType":"110","messageId":"111","endLine":47,"endColumn":31},{"ruleId":"131","severity":1,"message":"132","line":171,"column":43,"nodeType":"125","endLine":171,"endColumn":54},{"ruleId":"108","severity":1,"message":"126","line":2,"column":10,"nodeType":"110","messageId":"111","endLine":2,"endColumn":14},{"ruleId":"108","severity":1,"message":"128","line":5,"column":8,"nodeType":"110","messageId":"111","endLine":5,"endColumn":14},{"ruleId":"108","severity":1,"message":"133","line":10,"column":8,"nodeType":"110","messageId":"111","endLine":10,"endColumn":25},{"ruleId":"108","severity":1,"message":"134","line":23,"column":10,"nodeType":"110","messageId":"111","endLine":23,"endColumn":20},{"ruleId":"108","severity":1,"message":"129","line":26,"column":10,"nodeType":"110","messageId":"111","endLine":26,"endColumn":18},{"ruleId":"108","severity":1,"message":"130","line":26,"column":20,"nodeType":"110","messageId":"111","endLine":26,"endColumn":31},{"ruleId":"108","severity":1,"message":"135","line":27,"column":10,"nodeType":"110","messageId":"111","endLine":27,"endColumn":15},{"ruleId":"108","severity":1,"message":"136","line":27,"column":17,"nodeType":"110","messageId":"111","endLine":27,"endColumn":25},{"ruleId":"108","severity":1,"message":"137","line":28,"column":10,"nodeType":"110","messageId":"111","endLine":28,"endColumn":18},{"ruleId":"108","severity":1,"message":"138","line":28,"column":20,"nodeType":"110","messageId":"111","endLine":28,"endColumn":31},{"ruleId":"108","severity":1,"message":"139","line":96,"column":9,"nodeType":"110","messageId":"111","endLine":96,"endColumn":16},{"ruleId":"131","severity":1,"message":"132","line":174,"column":38,"nodeType":"125","endLine":174,"endColumn":49},{"ruleId":"108","severity":1,"message":"140","line":1,"column":25,"nodeType":"110","messageId":"111","endLine":1,"endColumn":34},{"ruleId":"108","severity":1,"message":"141","line":48,"column":19,"nodeType":"110","messageId":"111","endLine":48,"endColumn":32},{"ruleId":"114","severity":1,"message":"142","line":90,"column":7,"nodeType":"116","endLine":90,"endColumn":9,"suggestions":"143"},{"ruleId":"123","severity":1,"message":"124","line":13,"column":13,"nodeType":"125","endLine":13,"endColumn":19},{"ruleId":"114","severity":1,"message":"144","line":13,"column":5,"nodeType":"116","endLine":13,"endColumn":7,"suggestions":"145"},{"ruleId":"119","severity":1,"message":"120","line":57,"column":47,"nodeType":"121","messageId":"122","endLine":57,"endColumn":49},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"no-unused-vars","'UserProfile' is defined but never used.","Identifier","unusedVar","'StarBorderIcon' is defined but never used.","'StarIcon' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["148"],["149"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Link' is defined but never used.","'PropTypes' is defined but never used.","'Button' is defined but never used.","'username' is assigned a value but never used.","'setUserName' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'DialogContentText' is defined but never used.","'emailError' is assigned a value but never used.","'email' is assigned a value but never used.","'setEmail' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'decoded' is assigned a value but never used.","'useEffect' is defined but never used.","'chartInstance' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dates', 'prices', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["150"],"React Hook useEffect has a missing dependency: 'searchFilter'. Either include it or remove the dependency array.",["151"],"no-global-assign","no-unsafe-negation",{"desc":"152","fix":"153"},{"desc":"152","fix":"154"},{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},"Update the dependencies array to be: [props]",{"range":"159","text":"160"},{"range":"161","text":"160"},"Update the dependencies array to be: [dates, prices, props]",{"range":"162","text":"163"},"Update the dependencies array to be: [searchFilter]",{"range":"164","text":"165"},[937,939],"[props]",[1064,1066],[3035,3037],"[dates, prices, props]",[405,407],"[searchFilter]"]